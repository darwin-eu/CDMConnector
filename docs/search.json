[{"path":[]},{"path":"/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing issues","title":"Contributing to CDMConnector","text":"found bug, question, want suggest new feature please open issue. reporting bug, reprex much appreciated.","code":""},{"path":"/CONTRIBUTING.html","id":"contributing-code-or-documentation","dir":"","previous_headings":"","what":"Contributing code or documentation","title":"Contributing to CDMConnector","text":"package developed part DARWIN EU(R) project closed external contributions. contributing either documentation code, please make sure open issue beforehand identify needs done .","code":""},{"path":"/CONTRIBUTING.html","id":"documenting-the-package","dir":"","previous_headings":"Contributing code or documentation","what":"Documenting the package","title":"Contributing to CDMConnector","text":"Run update check package documentation: Note devtools::check_man() return warnings. commit limited package documentation, running sufficient (although running devtools::check() always generally good idea submitting pull request.","code":"devtools::document()  devtools::run_examples() devtools::build_readme() devtools::build_vignettes() devtools::check_man()"},{"path":"/CONTRIBUTING.html","id":"run-tests","dir":"","previous_headings":"Contributing code or documentation","what":"Run tests","title":"Contributing to CDMConnector","text":"starting contribute code, first make sure package tests passing. raise issue going (although please first make sure packages imports suggests installed). contribute code, make sure current tests add continue pass. package tests can run together : Code add new functionality accompanied tests. Code coverage can checked using:","code":"devtools::test() # note, you may first have to detach the package # detach(\"package:IncidencePrevalence\", unload=TRUE) devtools::test_coverage()"},{"path":"/CONTRIBUTING.html","id":"adhere-to-code-style","dir":"","previous_headings":"Contributing code or documentation","what":"Adhere to code style","title":"Contributing to CDMConnector","text":"Please adhere code style adding new code. though restyle code unrelated pull request make code review difficult.","code":"lintr::lint_package(\".\",                     linters = lintr::linters_with_defaults(                       lintr::object_name_linter(styles = \"camelCase\")                     ) )"},{"path":"/CONTRIBUTING.html","id":"run-check-before-opening-a-pull-request","dir":"","previous_headings":"Contributing code or documentation","what":"Run check() before opening a pull request","title":"Contributing to CDMConnector","text":"opening pull request please make sure run: warnings seen. package CRAN close submitted CRAN please also run: Also can worth checking spelling urls","code":"devtools::check() rcmdcheck::rcmdcheck(args = c(\"--no-manual\", \"--as-cran\")) devtools::check_win_devel() spelling::spell_check_package() urlchecker::url_check()"},{"path":"/articles/a01_getting-started.html","id":"creating-a-reference-to-the-omop-cdm","dir":"Articles","previous_headings":"","what":"Creating a reference to the OMOP CDM","title":"Getting Started","text":"Typically OMOP CDM datasets stored database can range size hundreds patients thousands records hundreds millions patients billions records. Observational Health Data Science Informatics (OHDSI) community supports selection popular database platforms including Postgres, Microsoft SQL Server, Oracle, well cloud data platforms suchs Amazon Redshift, Google Big Query, Databricks, Snowflake. first step using CDMConnector create connection database R. can take effort first time set drivers. See “Database Connection Examples” vignette check Posit’s database documentation. example’s use synthetic data Synthea project mapped OMOP CDM format. ’ll use duckdb database file based database similar SQLite better date type support. see example datasets available run exampleDatasets(). ’re using CDMConnector first time may get message adding enviroment vairable EUNOMIA_DATA_FOLDER . simply create new text file home directory called .Renviron add line EUNOMIA_DATA_FOLDER=\"path//folder///can/store/example/data\". run usethis::edit_r_environ() file created opened opened RStudio. connecting database containing data mapped OMOP CDM, use cdmFromCon create CDM reference. CDM reference single object contains dplyr table references CDM table along metadata CDM instance. cdmSchema schema database contains OMOP CDM tables required. writeSchema schema database user ability create tables. cdmSchema writeSchema required create cdm object. Every cdm object needs cdmName used identify CDM output files. Individual CDM table references can accessed using `$`. can use dplyr query cdm tables just R dataframe. difference data stays database SQL code dynamically generated set database backend. goal allow users think much database SQL instead use familiar R syntax work large tables. collect bring data database R. careful request gigantic result set! general better aggregate data database, possible, bringing data R.","code":"library(CDMConnector) exampleDatasets() #>  [1] \"GiBleed\"                             \"synthea-allergies-10k\"               #>  [3] \"synthea-anemia-10k\"                  \"synthea-breast_cancer-10k\"           #>  [5] \"synthea-contraceptives-10k\"          \"synthea-covid19-10k\"                 #>  [7] \"synthea-covid19-200k\"                \"synthea-dermatitis-10k\"              #>  [9] \"synthea-heart-10k\"                   \"synthea-hiv-10k\"                     #> [11] \"synthea-lung_cancer-10k\"             \"synthea-medications-10k\"             #> [13] \"synthea-metabolic_syndrome-10k\"      \"synthea-opioid_addiction-10k\"        #> [15] \"synthea-rheumatoid_arthritis-10k\"    \"synthea-snf-10k\"                     #> [17] \"synthea-surgery-10k\"                 \"synthea-total_joint_replacement-10k\" #> [19] \"synthea-veteran_prostate_cancer-10k\" \"synthea-veterans-10k\"                #> [21] \"synthea-weight_loss-10k\"             \"synpuf-1k\"                           #> [23] \"empty_cdm\"  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir(\"GiBleed\")) DBI::dbListTables(con) #>  [1] \"care_site\"             \"cdm_source\"            \"concept\"               #>  [4] \"concept_ancestor\"      \"concept_class\"         \"concept_relationship\"  #>  [7] \"concept_synonym\"       \"condition_era\"         \"condition_occurrence\"  #> [10] \"cost\"                  \"death\"                 \"device_exposure\"       #> [13] \"domain\"                \"dose_era\"              \"drug_era\"              #> [16] \"drug_exposure\"         \"drug_strength\"         \"fact_relationship\"     #> [19] \"location\"              \"measurement\"           \"metadata\"              #> [22] \"note\"                  \"note_nlp\"              \"observation\"           #> [25] \"observation_period\"    \"payer_plan_period\"     \"person\"                #> [28] \"procedure_occurrence\"  \"provider\"              \"relationship\"          #> [31] \"source_to_concept_map\" \"specimen\"              \"visit_detail\"          #> [34] \"visit_occurrence\"      \"vocabulary\" cdm <- cdmFromCon(con, cdmName = \"eunomia\", cdmSchema = \"main\", writeSchema = \"main\") cdm #>  #> ── # OMOP CDM reference (duckdb) of eunomia ──────────────────────────────────── #> • omop tables: person, observation_period, visit_occurrence, visit_detail, #> condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, #> measurement, observation, death, note, note_nlp, specimen, fact_relationship, #> location, care_site, provider, payer_plan_period, cost, drug_era, dose_era, #> condition_era, metadata, cdm_source, concept, vocabulary, domain, #> concept_class, concept_relationship, relationship, concept_synonym, #> concept_ancestor, source_to_concept_map, drug_strength #> • cohort tables: - #> • achilles tables: - #> • other tables: - cdm$observation_period #> # Source:   table<observation_period> [?? x 5] #> # Database: DuckDB v1.2.1 [root@Darwin 23.1.0:R 4.3.3//private/var/folders/2j/8z0yfn1j69q8sxjc7vj9yhz40000gp/T/Rtmp18mZxL/file169c5d69279d.duckdb] #>    observation_period_id person_id observation_period_s…¹ observation_period_e…² #>                    <int>     <int> <date>                 <date>                 #>  1                     6         6 1963-12-31             2007-02-06             #>  2                    13        13 2009-04-26             2019-04-14             #>  3                    27        27 2002-01-30             2018-11-21             #>  4                    16        16 1971-10-14             2017-11-02             #>  5                    55        55 2009-05-30             2019-03-23             #>  6                    60        60 1990-11-21             2019-01-23             #>  7                    42        42 1909-11-03             2019-03-13             #>  8                    33        33 1986-05-12             2018-09-10             #>  9                    18        18 1965-11-17             2018-11-07             #> 10                    25        25 2007-03-18             2019-04-07             #> # ℹ more rows #> # ℹ abbreviated names: ¹​observation_period_start_date, #> #   ²​observation_period_end_date #> # ℹ 1 more variable: period_type_concept_id <int> cdm$person %>%    dplyr::glimpse() #> Rows: ?? #> Columns: 18 #> Database: DuckDB v1.2.1 [root@Darwin 23.1.0:R 4.3.3//private/var/folders/2j/8z0yfn1j69q8sxjc7vj9yhz40000gp/T/Rtmp18mZxL/file169c5d69279d.duckdb] #> $ person_id                   <int> 6, 123, 129, 16, 65, 74, 42, 187, 18, 111,… #> $ gender_concept_id           <int> 8532, 8507, 8507, 8532, 8532, 8532, 8532, … #> $ year_of_birth               <int> 1963, 1950, 1974, 1971, 1967, 1972, 1909, … #> $ month_of_birth              <int> 12, 4, 10, 10, 3, 1, 11, 7, 11, 5, 8, 3, 3… #> $ day_of_birth                <int> 31, 12, 7, 13, 31, 5, 2, 23, 17, 2, 19, 13… #> $ birth_datetime              <dttm> 1963-12-31, 1950-04-12, 1974-10-07, 1971-… #> $ race_concept_id             <int> 8516, 8527, 8527, 8527, 8516, 8527, 8527, … #> $ ethnicity_concept_id        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ location_id                 <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ provider_id                 <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ care_site_id                <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ person_source_value         <chr> \"001f4a87-70d0-435c-a4b9-1425f6928d33\", \"0… #> $ gender_source_value         <chr> \"F\", \"M\", \"M\", \"F\", \"F\", \"F\", \"F\", \"M\", \"F… #> $ gender_source_concept_id    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ race_source_value           <chr> \"black\", \"white\", \"white\", \"white\", \"black… #> $ race_source_concept_id      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ ethnicity_source_value      <chr> \"west_indian\", \"italian\", \"polish\", \"ameri… #> $ ethnicity_source_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)  cdm$person %>%    group_by(year_of_birth, gender_concept_id) %>%    summarize(n = n(), .groups = \"drop\") %>%    collect() %>%    mutate(sex = case_when(     gender_concept_id == 8532 ~ \"Female\",     gender_concept_id == 8507 ~ \"Male\"   )) %>%    ggplot(aes(y = n, x = year_of_birth, fill = sex)) +   geom_histogram(stat = \"identity\", position = \"dodge\") +   labs(x = \"Year of birth\",         y = \"Person count\",         title = \"Age Distribution\",        subtitle = cdmName(cdm),        fill = NULL) +   theme_bw()"},{"path":"/articles/a01_getting-started.html","id":"joining-tables","dir":"Articles","previous_headings":"","what":"Joining tables","title":"Getting Started","text":"Since OMOP CDM relational data model joins common analytic code. events OMOP CDM recorded using integers representing standard “concepts”. see text description concept researchers need join clinical tables concept vocabulary table. Every OMOP CDM copy vocabulary used map data OMOP CDM format. example query looking common conditions CDM. Let’s look common drugs used patients “Acute viral pharyngitis”. inspect generated SQL use show_query dplyr. simple queries. complex queries can built combining simple queries like ones analytic packages provide functions implement common analytic use cases. example “cohort definition” set criteria persons must satisfy can quite complex. “Working Cohorts” vignette describes creating using cohorts CDMConnector.","code":"cdm$condition_occurrence %>%    count(condition_concept_id, sort = T) %>%    left_join(cdm$concept, by = c(\"condition_concept_id\" = \"concept_id\")) %>%    collect() %>%    select(\"condition_concept_id\", \"concept_name\", \"n\")  #> # A tibble: 80 × 3 #>    condition_concept_id concept_name                                           n #>                   <int> <chr>                                              <dbl> #>  1              4116491 Escherichia coli urinary tract infection             482 #>  2              4113008 Laceration of hand                                   500 #>  3              4156265 Facial laceration                                    497 #>  4              4155034 Laceration of forearm                                507 #>  5              4109685 Laceration of foot                                   484 #>  6              4094814 Bullet wound                                          46 #>  7              4048695 Fracture of vertebral column without spinal cord …    23 #>  8             40486433 Perennial allergic rhinitis                           64 #>  9              4051466 Childhood asthma                                      96 #> 10              4142905 Fracture of rib                                      263 #> # ℹ 70 more rows cdm$condition_occurrence %>%    filter(condition_concept_id == 4112343) %>%    distinct(person_id) %>%    inner_join(cdm$drug_exposure, by = \"person_id\") %>%    count(drug_concept_id, sort = TRUE) %>%    left_join(cdm$concept, by = c(\"drug_concept_id\" = \"concept_id\")) %>%    collect() %>%    select(\"concept_name\", \"n\")  #> # A tibble: 113 × 2 #>    concept_name                                                                n #>    <chr>                                                                   <dbl> #>  1 hepatitis B vaccine, adult dosage                                        1826 #>  2 Alendronic acid 10 MG Oral Tablet                                         129 #>  3 alteplase 100 MG Injection                                                210 #>  4 Nitroglycerin 0.4 MG/ACTUAT Mucosal Spray                                 207 #>  5 atorvastatin 80 MG Oral Tablet                                             57 #>  6 Fentanyl                                                                    8 #>  7 Etonogestrel 68 MG Drug Implant                                             6 #>  8 Naproxen sodium 220 MG Oral Tablet                                       1120 #>  9 Diclofenac                                                                818 #> 10 {5 (Ethinyl Estradiol 0.02 MG / norethindrone acetate 1 MG Oral Tablet…    78 #> # ℹ 103 more rows cdm$condition_occurrence %>%    filter(condition_concept_id == 4112343) %>%    distinct(person_id) %>%    inner_join(cdm$drug_exposure, by = \"person_id\") %>%    count(drug_concept_id, sort = TRUE) %>%    left_join(cdm$concept, by = c(\"drug_concept_id\" = \"concept_id\")) %>%    show_query()  #> <SQL> #> SELECT #>   LHS.*, #>   concept_name, #>   domain_id, #>   vocabulary_id, #>   concept_class_id, #>   standard_concept, #>   concept_code, #>   valid_start_date, #>   valid_end_date, #>   invalid_reason #> FROM ( #>   SELECT drug_concept_id, COUNT(*) AS n #>   FROM ( #>     SELECT #>       LHS.person_id AS person_id, #>       drug_exposure_id, #>       drug_concept_id, #>       drug_exposure_start_date, #>       drug_exposure_start_datetime, #>       drug_exposure_end_date, #>       drug_exposure_end_datetime, #>       verbatim_end_date, #>       drug_type_concept_id, #>       stop_reason, #>       refills, #>       quantity, #>       days_supply, #>       sig, #>       route_concept_id, #>       lot_number, #>       provider_id, #>       visit_occurrence_id, #>       visit_detail_id, #>       drug_source_value, #>       drug_source_concept_id, #>       route_source_value, #>       dose_unit_source_value #>     FROM ( #>       SELECT DISTINCT person_id #>       FROM condition_occurrence #>       WHERE (condition_concept_id = 4112343.0) #>     ) LHS #>     INNER JOIN drug_exposure #>       ON (LHS.person_id = drug_exposure.person_id) #>   ) q01 #>   GROUP BY drug_concept_id #> ) LHS #> LEFT JOIN concept #>   ON (LHS.drug_concept_id = concept.concept_id)"},{"path":"/articles/a01_getting-started.html","id":"saving-query-results-to-the-database","dir":"Articles","previous_headings":"","what":"Saving query results to the database","title":"Getting Started","text":"Sometimes helpful save query results database instead reading result R. dplyr provides compute function due differences database systems CDMConnector needed export method handles slight differences. Internally CDMConnector runs compute_query function tested across OHDSI supported database platforms. writing data CDM database need add one argument creating cdm reference object, “write_schema”. schema database write permissions. Typically separate schema “cdm_schema”. can see query saved new table scratch schema. compute returns dplyr reference table.","code":"DBI::dbExecute(con, \"create schema scratch;\") #> [1] 0 cdm <- cdmFromCon(con, cdmName = \"eunomia\", cdmSchema = \"main\", writeSchema = \"scratch\") #> Note: method with signature 'DBIConnection#Id' chosen for function 'dbExistsTable', #>  target signature 'duckdb_connection#Id'. #>  \"duckdb_connection#ANY\" would also be valid drugs <- cdm$condition_occurrence %>%    filter(condition_concept_id == 4112343) %>%    distinct(person_id) %>%    inner_join(cdm$drug_exposure, by = \"person_id\") %>%    count(drug_concept_id, sort = TRUE) %>%    left_join(cdm$concept, by = c(\"drug_concept_id\" = \"concept_id\")) %>%    compute(name = \"test\", temporary = FALSE, overwrite = TRUE)  drugs %>% show_query() #> <SQL> #> SELECT * #> FROM scratch.test  drugs #> # Source:   table<scratch.test> [?? x 11] #> # Database: DuckDB v1.2.1 [root@Darwin 23.1.0:R 4.3.3//private/var/folders/2j/8z0yfn1j69q8sxjc7vj9yhz40000gp/T/Rtmp18mZxL/file169c5d69279d.duckdb] #>    drug_concept_id     n concept_name   domain_id vocabulary_id concept_class_id #>              <int> <dbl> <chr>          <chr>     <chr>         <chr>            #>  1        40213306  1826 hepatitis B v… Drug      CVX           CVX              #>  2        40173590   129 Alendronic ac… Drug      RxNorm        Clinical Drug    #>  3        40220960   210 alteplase 100… Drug      RxNorm        Clinical Drug    #>  4        19126352   207 Nitroglycerin… Drug      RxNorm        Clinical Drug    #>  5         1545959    57 atorvastatin … Drug      RxNorm        Clinical Drug    #>  6         1154029     8 Fentanyl       Drug      RxNorm        Ingredient       #>  7         1519937     6 Etonogestrel … Drug      RxNorm        Clinical Drug    #>  8        19077572    83 Galantamine 4… Drug      RxNorm        Clinical Drug    #>  9        43012754    29 Levonorgestre… Drug      RxNorm        Clinical Drug    #> 10        19133679     4 {28 (Norethin… Drug      RxNorm        Branded Pack     #> # ℹ more rows #> # ℹ 5 more variables: standard_concept <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr>"},{"path":"/articles/a01_getting-started.html","id":"selecting-a-subset-of-cdm-tables","dir":"Articles","previous_headings":"","what":"Selecting a subset of CDM tables","title":"Getting Started","text":"need references tables can easily select subset tables include CDM reference. cdmSelect function supports tidyselect selection language provides new selection helper: tbl_group. Predefined sets tables can also selected using tbl_group supports several subsets CDM: “”, “clinical”, “vocab”, “derived”, “default”. default set CDM tables included CDM object :","code":"cdm %>% cdmSelect(\"person\", \"observation_period\") # quoted names #>  #> ── # OMOP CDM reference (duckdb) of eunomia ──────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - cdm %>% cdmSelect(person, observation_period) # unquoted names  #>  #> ── # OMOP CDM reference (duckdb) of eunomia ──────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - cdm %>% cdmSelect(starts_with(\"concept\")) # tables that start with 'concept' #>  #> ── # OMOP CDM reference (duckdb) of eunomia ──────────────────────────────────── #> • omop tables: concept, concept_class, concept_relationship, concept_synonym, #> concept_ancestor #> • cohort tables: - #> • achilles tables: - #> • other tables: - cdm %>% cdmSelect(contains(\"era\")) # tables that contain the substring 'era' #>  #> ── # OMOP CDM reference (duckdb) of eunomia ──────────────────────────────────── #> • omop tables: drug_era, dose_era, condition_era #> • cohort tables: - #> • achilles tables: - #> • other tables: - cdm %>% cdmSelect(matches(\"person|period\")) # regular expression #>  #> ── # OMOP CDM reference (duckdb) of eunomia ──────────────────────────────────── #> • omop tables: person, observation_period, payer_plan_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # pre-defined groups cdm %>% cdmSelect(tblGroup(\"clinical\"))  #>  #> ── # OMOP CDM reference (duckdb) of eunomia ──────────────────────────────────── #> • omop tables: person, observation_period, visit_occurrence, visit_detail, #> condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, #> measurement, observation, death, note, note_nlp, specimen, fact_relationship #> • cohort tables: - #> • achilles tables: - #> • other tables: - cdm %>% cdmSelect(tblGroup(\"vocab\"))  #>  #> ── # OMOP CDM reference (duckdb) of eunomia ──────────────────────────────────── #> • omop tables: concept, vocabulary, domain, concept_class, #> concept_relationship, relationship, concept_synonym, concept_ancestor, #> source_to_concept_map, drug_strength #> • cohort tables: - #> • achilles tables: - #> • other tables: - tblGroup(\"default\") #>  [1] \"person\"               \"observation_period\"   \"visit_occurrence\"     #>  [4] \"condition_occurrence\" \"drug_exposure\"        \"procedure_occurrence\" #>  [7] \"measurement\"          \"observation\"          \"death\"                #> [10] \"location\"             \"care_site\"            \"provider\"             #> [13] \"drug_era\"             \"dose_era\"             \"condition_era\"        #> [16] \"cdm_source\"           \"concept\"              \"vocabulary\"           #> [19] \"concept_relationship\" \"concept_synonym\"      \"concept_ancestor\"     #> [22] \"drug_strength\""},{"path":"/articles/a01_getting-started.html","id":"subsetting-a-cdm","dir":"Articles","previous_headings":"","what":"Subsetting a CDM","title":"Getting Started","text":"Sometimes helpful subset CDM specific set persons simply sample data reasonable size. Let’s subset cdm just persons Pneumonia (concept_id 255848). works best number persons subset quite small database indexes “person_id” columns table. Alternatively simply want random sample entire CDM can use cdm_sample.","code":"personIds <- cdm$condition_occurrence %>%    filter(condition_concept_id == 255848) %>%    distinct(person_id) %>%    pull(person_id)  length(personIds) #> [1] 52  cdm_pneumonia <- cdm %>%   cdmSubset(personId = personIds)  tally(cdm_pneumonia$person) %>%    pull(n) #> [1] 52  cdm_pneumonia$condition_occurrence %>%    distinct(person_id) %>%    tally() %>%    pull(n) #> [1] 52 cdm_100person <- cdmSample(cdm, n = 100)  tally(cdm_100person$person) %>% pull(\"n\") #> [1] 100"},{"path":"/articles/a01_getting-started.html","id":"flatten-a-cdm","dir":"Articles","previous_headings":"","what":"Flatten a CDM","title":"Getting Started","text":"OMOP CDM relational data model. Sometimes helpful flatten relational structure “tidy” dataframe one row per observation. transformation done small number persons events.","code":"cdmFlatten(cdm_pneumonia,            domain = c(\"condition_occurrence\", \"drug_exposure\", \"measurement\")) %>%    collect() #> # A tibble: 3,892 × 8 #>    person_id observation_concept_id start_date end_date   type_concept_id domain #>        <int>                  <int> <date>     <date>               <int> <chr>  #>  1       507               40766240 1957-09-13 1957-09-13            5001 measu… #>  2      1273                 260139 1947-11-29 1947-12-13           32020 condi… #>  3       334               40480160 2009-09-12 2009-10-12           32020 condi… #>  4      2333                 195588 1967-08-30 1967-10-14           32020 condi… #>  5      2801                4112343 1986-12-04 1986-12-17           32020 condi… #>  6       550                4116491 1957-11-09 1957-12-16           32020 condi… #>  7      2739                4112343 1989-01-24 1989-02-01           32020 condi… #>  8      4308                1118084 1947-12-31 1947-12-31        38000177 drug_… #>  9       430                1127433 2006-02-15 2006-02-22        38000177 drug_… #> 10      2786               19006318 1957-03-05 1957-04-02        38000177 drug_… #> # ℹ 3,882 more rows #> # ℹ 2 more variables: observation_concept_name <chr>, type_concept_name <chr>"},{"path":"/articles/a01_getting-started.html","id":"closing-connections","dir":"Articles","previous_headings":"Flatten a CDM","what":"Closing connections","title":"Getting Started","text":"Close database connection dbDisconnect. connection closed cdm objects created connection can longer used.","code":"DBI::dbDisconnect(con, shutdown = TRUE)"},{"path":"/articles/a01_getting-started.html","id":"summary","dir":"Articles","previous_headings":"Flatten a CDM","what":"Summary","title":"Getting Started","text":"CDMConnector provides interface working observational health data OMOP CDM format R. Check vignettes details package.","code":""},{"path":"/articles/a02_cohorts.html","id":"cohort-generation","dir":"Articles","previous_headings":"","what":"Cohort Generation","title":"Working with cohorts","text":"n*4n*4 cohort table created process cohort generation. generate cohort specific CDM dataset means combine cohort definition CDM produce cohort table. standardization provided OMOP CDM allows researchers generate cohort definition OMOP CDM dataset. cohort definition expression rules goverining inclusion/exclusion person-days cohort. three common ways create cohort definitions OMOP CDM. Atlas cohort builder Capr R package Custom SQL /R code Atlas web application provides graphical user interface creating cohort definitions. . get started Atlas check free course Ehden Academy demo https://atlas-demo.ohdsi.org/. Capr R package provides code-based interface creating cohort definitions. options available Capr exactly match options available Atlas resulting cohort tables identical. times customization needed possible use bespoke SQL dplyr code build cohort. CDMConnector provides generate_concept_cohort_set function quickly building simple cohorts can starting point subsetting. Atlas cohorts represented using json text files. “generate” one Atlas cohorts cdm object use read_cohort_set function first read folder Atlas cohort json files R. create cohort table generate_cohort_set. can optional csv file called “CohortsToCreate.csv” folder specifies cohort IDs names use. file doesn’t exist IDs assigned automatically using alphabetical order filenames.","code":"pathToCohortJsonFiles <- system.file(\"cohorts1\", package = \"CDMConnector\") list.files(pathToCohortJsonFiles) #> [1] \"cerebral_venous_sinus_thrombosis_01.json\" #> [2] \"CohortsToCreate.csv\"                      #> [3] \"deep_vein_thrombosis_01.json\"  readr::read_csv(file.path(pathToCohortJsonFiles, \"CohortsToCreate.csv\"),                 show_col_types = FALSE) #> # A tibble: 2 × 3 #>   cohortId cohortName                          jsonPath                          #>      <dbl> <chr>                               <chr>                             #> 1        1 cerebral_venous_sinus_thrombosis_01 cerebral_venous_sinus_thrombosis… #> 2        2 deep_vein_thrombosis_01             deep_vein_thrombosis_01.json"},{"path":"/articles/a02_cohorts.html","id":"atlas-cohort-definitions","dir":"Articles","previous_headings":"Cohort Generation","what":"Atlas cohort definitions","title":"Working with cohorts","text":"First need create CDM object. Note need specify write_schema creating object. Cohort tables go CDM’s write_schema. generated cohort associated metadata tables. can access utility functions. cohort_count contains person record counts cohort cohort set settings table contains cohort id cohort name attrition table contains attrition information (persons, records dropped sequential inclusion rule) Note cohort table still database can quite large. can also join CDM table subset entire cdm just persons cohort.","code":"library(CDMConnector) pathToCohortJsonFiles <- system.file(\"example_cohorts\", package = \"CDMConnector\") list.files(pathToCohortJsonFiles) #> [1] \"GiBleed_default.json\" \"GIBleed_male.json\"  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir(\"GiBleed\")) cdm <- cdmFromCon(con, cdmName = \"eunomia\", cdmSchema = \"main\", writeSchema = \"main\")  cohortSet <- readCohortSet(pathToCohortJsonFiles) |>   mutate(cohort_name = snakecase::to_snake_case(cohort_name))  cohortSet #> # A tibble: 2 × 5 #>   cohort_definition_id cohort_name     cohort       json   cohort_name_snakecase #>                  <int> <chr>           <list>       <list> <chr>                 #> 1                    1 gibleed_default <named list> <chr>  gibleed_default       #> 2                    2 gibleed_male    <named list> <chr>  gibleed_male  cdm <- generateCohortSet(   cdm = cdm,    cohortSet = cohortSet,   name = \"study_cohorts\" ) #> ℹ Generating 2 cohorts #> ℹ Generating cohort (1/2) - gibleed_default #> ✔ Generating cohort (1/2) - gibleed_default [119ms] #>  #> ℹ Generating cohort (2/2) - gibleed_male #> ✔ Generating cohort (2/2) - gibleed_male [122ms] #>   cdm$study_cohorts #> # Source:   table<study_cohorts> [?? x 4] #> # Database: DuckDB v1.2.1 [root@Darwin 23.1.0:R 4.3.3//private/var/folders/2j/8z0yfn1j69q8sxjc7vj9yhz40000gp/T/Rtmp8T8uSI/file169e2add0028.duckdb] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <dbl> <date>            <date>          #>  1                    1        304 1998-05-03        2019-06-17      #>  2                    1        807 1994-11-04        2019-03-19      #>  3                    1       1674 2012-04-27        2019-06-10      #>  4                    1        987 1988-02-16        2019-06-02      #>  5                    1       1201 2008-01-19        2018-10-31      #>  6                    1       5278 2013-10-23        2019-06-14      #>  7                    1       1352 1989-09-23        2019-02-03      #>  8                    1       3195 1984-10-22        2019-01-07      #>  9                    1       3438 1947-03-07        1992-01-11      #> 10                    1       3822 1986-11-13        2019-05-20      #> # ℹ more rows cohortCount(cdm$study_cohorts) #> # A tibble: 2 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1            479             479 #> 2                    2            237             237 settings(cdm$study_cohorts) #> # A tibble: 2 × 2 #>   cohort_definition_id cohort_name     #>                  <int> <chr>           #> 1                    1 gibleed_default #> 2                    2 gibleed_male attrition(cdm$study_cohorts) #> # A tibble: 6 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1            479             479         1 Qualifying init… #> 2                    1            479             479         2 Cohort records … #> 3                    2            479             479         1 Qualifying init… #> 4                    2            237             237         2 Male             #> 5                    2            237             237         3 30 days prior o… #> 6                    2            237             237         4 Cohort records … #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cdm_gibleed <- cdm %>%    cdmSubsetCohort(cohortTable = \"study_cohorts\")"},{"path":"/articles/a02_cohorts.html","id":"subset-a-cohort","dir":"Articles","previous_headings":"Cohort Generation","what":"Subset a cohort","title":"Working with cohorts","text":"Suppose generated cohort like create new cohort subset first. can done using First generate example cohort set create new cohort based filtering Atlas cohort. example take people cohort cohort duration longer 4 weeks. Using dplyr can write query save result new table cdm. case can see cohorts 1 5 dropped completely patients dropped cohorts 2, 3, 4. Let’s confirm everyone cohorts 1 5 cohort less 28 days. confirmed everyone cohorts 1 5 cohort less 10 days. Now suppose like create new cohort table three different versions cohorts original cohort table. keep persons cohort 2 weeks, 3 weeks, 4 weeks. can simply write custom dplyr create table call new_generated_cohort_set just like previous example. example creating new cohorts existing cohorts using CDMConnector. lot flexibility approach. Next look completely custom cohort creation quite similar.","code":"library(CDMConnector) con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir()) cdm <- cdmFromCon(con, cdmSchema = \"main\", writeSchema = \"main\")  cohortSet <- readCohortSet(system.file(\"cohorts3\", package = \"CDMConnector\"))   cdm <- generateCohortSet(cdm, cohortSet, name = \"cohort\")  #> ℹ Generating 5 cohorts #> ℹ Generating cohort (1/5) - gibleed_all_end_10 #> ✔ Generating cohort (1/5) - gibleed_all_end_10 [62ms] #>  #> ℹ Generating cohort (2/5) - gibleed_all #> ✔ Generating cohort (2/5) - gibleed_all [55ms] #>  #> ℹ Generating cohort (3/5) - gibleed_default_with_descendants #> ✔ Generating cohort (3/5) - gibleed_default_with_descendants [58ms] #>  #> ℹ Generating cohort (4/5) - gibleed_default #> ✔ Generating cohort (4/5) - gibleed_default [58ms] #>  #> ℹ Generating cohort (5/5) - gibleed_end_10 #> ✔ Generating cohort (5/5) - gibleed_end_10 [58ms] #>   cdm$cohort #> # Source:   table<cohort> [?? x 4] #> # Database: DuckDB v1.2.1 [root@Darwin 23.1.0:R 4.3.3//private/var/folders/2j/8z0yfn1j69q8sxjc7vj9yhz40000gp/T/Rtmp8T8uSI/file169e2121b1c36.duckdb] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <dbl> <date>            <date>          #>  1                    1        163 2010-04-25        2010-05-05      #>  2                    1       1088 2011-09-10        2011-09-20      #>  3                    1       4544 1984-06-02        1984-06-12      #>  4                    1        693 1995-09-01        1995-09-11      #>  5                    1       1525 1998-12-22        1999-01-01      #>  6                    1       2103 2010-11-02        2010-11-12      #>  7                    1       2485 1953-04-30        1953-05-10      #>  8                    1       3216 1995-12-22        1996-01-01      #>  9                    1       4340 2010-04-28        2010-05-08      #> 10                    1       5142 1985-05-16        1985-05-26      #> # ℹ more rows  cohortCount(cdm$cohort) #> # A tibble: 5 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1            479             479 #> 2                    2            479             479 #> 3                    3            479             479 #> 4                    4            479             479 #> 5                    5            479             479 library(dplyr)  cdm$cohort_subset <- cdm$cohort %>%    # only keep persons who are in the cohort at least 28 days   filter(!!datediff(\"cohort_start_date\", \"cohort_end_date\") >= 28) %>%    compute(name = \"cohort_subset\", temporary = FALSE, overwrite = TRUE) %>%    newCohortTable()  cohortCount(cdm$cohort_subset) #> # A tibble: 5 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1            479             479 #> 2                    2            479             479 #> 3                    3            479             479 #> 4                    4            479             479 #> 5                    5            479             479 daysInCohort <- cdm$cohort %>%    filter(cohort_definition_id %in% c(1,5)) %>%    mutate(days_in_cohort = !!datediff(\"cohort_start_date\", \"cohort_end_date\")) %>%    count(cohort_definition_id, days_in_cohort) %>%    collect()  daysInCohort #> # A tibble: 8 × 3 #>   cohort_definition_id days_in_cohort     n #>                  <int>          <dbl> <dbl> #> 1                    1              2     1 #> 2                    1              1    10 #> 3                    5              1    10 #> 4                    1             10   467 #> 5                    5              9     1 #> 6                    5              2     1 #> 7                    1              9     1 #> 8                    5             10   467 cdm$cohort_subset <- cdm$cohort %>%    filter(!!datediff(\"cohort_start_date\", \"cohort_end_date\") >= 14) %>%    mutate(cohort_definition_id = 10 + cohort_definition_id) %>%    union_all(     cdm$cohort %>%     filter(!!datediff(\"cohort_start_date\", \"cohort_end_date\") >= 21) %>%      mutate(cohort_definition_id = 100 + cohort_definition_id)   ) %>%    union_all(     cdm$cohort %>%      filter(!!datediff(\"cohort_start_date\", \"cohort_end_date\") >= 28) %>%      mutate(cohort_definition_id = 1000 + cohort_definition_id)   ) %>%    compute(name = \"cohort_subset\", temporary = FALSE, overwrite = TRUE) # %>%    # newCohortTable() # this function creates the cohort object and metadata  cdm$cohort_subset %>%    mutate(days_in_cohort = !!datediff(\"cohort_start_date\", \"cohort_end_date\")) %>%    group_by(cohort_definition_id) %>%    summarize(mean_days_in_cohort = mean(days_in_cohort, na.rm = TRUE)) %>%    collect() %>%    arrange(mean_days_in_cohort) #> # A tibble: 9 × 2 #>   cohort_definition_id mean_days_in_cohort #>                  <dbl>               <dbl> #> 1                   14               7586. #> 2                   13               7586. #> 3                   12               7586. #> 4                  103               7602. #> 5                 1004               7602. #> 6                  102               7602. #> 7                 1002               7602. #> 8                 1003               7602. #> 9                  104               7602."},{"path":"/articles/a02_cohorts.html","id":"custom-cohort-creation","dir":"Articles","previous_headings":"Cohort Generation","what":"Custom Cohort Creation","title":"Working with cohorts","text":"Sometimes may want create cohorts easily expressed using Atlas Capr. situations can create implement cohort creation using SQL R. See chapter Book OHDSI details using SQL create cohorts. CDMConnector provides helper function build simple cohorts list OMOP concepts. generate_concept_cohort_set accepts named list concept sets create cohorts based concept sets. function allow inclusion/exclusion criteria initial definition, additional criteria can applied “manually” initial generation. example built cohort table concept set. cohort essentially captures patient-time based presence absence OMOP standard concept IDs. manually applied inclusion criteria recorded new attrition record cohort. learn approach building cohorts check PatientProfiles R package. can also create generated cohort set using method choose. long table CDM database four required columns can added CDM object generated cohort set. Suppose example cohort table First make sure table database create dplyr table reference add CDM object. make true generated cohort object use cohort_table can see cohort now class “cohort_table” well various metadata tables. like override attribute tables pass additional dataframes cohortTable Cohort building fundamental building block observational health analysis CDMConnector supports different ways creating cohorts. long cohort table required structure columns can add cdm new_generated_cohort_set function use downstream OHDSI analytic packages.","code":"library(dplyr, warn.conflicts = FALSE)  cdm <- generateConceptCohortSet(   cdm,    conceptSet = list(gibleed = 192671),    name = \"gibleed2\", # name of the cohort table   limit = \"all\", # use all occurrences of the concept instead of just the first   end = 10 # set explicit cohort end date 10 days after start )  cdm$gibleed2 <- cdm$gibleed2 %>%    semi_join(     filter(cdm$person, gender_concept_id == 8507),      by = c(\"subject_id\" = \"person_id\")   ) %>%    recordCohortAttrition(reason = \"Male\")    attrition(cdm$gibleed2)  #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1            479             479         1 Initial qualify… #> 2                    1            237             237         2 Male             #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohort <- dplyr::tibble(   cohort_definition_id = 1L,   subject_id = 1L,   cohort_start_date = as.Date(\"1999-01-01\"),   cohort_end_date = as.Date(\"2001-01-01\") )  cohort #> # A tibble: 1 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <int>      <int> <date>            <date>          #> 1                    1          1 1999-01-01        2001-01-01 library(omopgenerics) #>  #> Attaching package: 'omopgenerics' #> The following object is masked from 'package:stats': #>  #>     filter cdm <- insertTable(cdm = cdm, name = \"cohort\", table = cohort, overwrite = TRUE)  cdm$cohort #> # Source:   table<cohort> [?? x 4] #> # Database: DuckDB v1.2.1 [root@Darwin 23.1.0:R 4.3.3//private/var/folders/2j/8z0yfn1j69q8sxjc7vj9yhz40000gp/T/Rtmp8T8uSI/file169e2121b1c36.duckdb] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <int>      <int> <date>            <date>          #> 1                    1          1 1999-01-01        2001-01-01 cdm$cohort <- newCohortTable(cdm$cohort) cohortCount(cdm$cohort) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              1               1 settings(cdm$cohort) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1 attrition(cdm$cohort) #> # A tibble: 1 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cdm <- insertTable(cdm = cdm, name = \"cohort2\", table = cohort, overwrite = TRUE) cdm$cohort2 <- newCohortTable(cdm$cohort2) settings(cdm$cohort2) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1  cohort_set <- data.frame(cohort_definition_id = 1L,                          cohort_name = \"made_up_cohort\") cdm$cohort2 <- newCohortTable(cdm$cohort2, cohortSetRef = cohort_set)  settings(cdm$cohort2) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name    #>                  <int> <chr>          #> 1                    1 made_up_cohort DBI::dbDisconnect(con, shutdown = TRUE)"},{"path":"/articles/a03_dbplyr.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"CDMConnector and dbplyr","text":"First let’s load required packages code vignette. haven’t already installed , packages can installed using ´install.packages()´","code":"library(CDMConnector) library(dplyr, warn.conflicts = FALSE) library(ggplot2)"},{"path":"/articles/a03_dbplyr.html","id":"creating-the-cdm-reference","dir":"Articles","previous_headings":"","what":"Creating the cdm reference","title":"CDMConnector and dbplyr","text":"Now let´s connect duckdb database Eunomia data (https://github.com/OHDSI/Eunomia). cdm object now ´ll use going forward. provides reference OMOP CDM tables. can see tables still database, now reference ones might want use analysis. example, person table can referenced like ","code":"con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) cdm <- cdmFromCon(con, cdmName = \"eunomia\", cdmSchema = \"main\", writeSchema = \"main\") cdm #>  #> ── # OMOP CDM reference (duckdb) of eunomia ──────────────────────────────────── #> • omop tables: person, observation_period, visit_occurrence, visit_detail, #> condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, #> measurement, observation, death, note, note_nlp, specimen, fact_relationship, #> location, care_site, provider, payer_plan_period, cost, drug_era, dose_era, #> condition_era, metadata, cdm_source, concept, vocabulary, domain, #> concept_class, concept_relationship, relationship, concept_synonym, #> concept_ancestor, source_to_concept_map, drug_strength #> • cohort tables: - #> • achilles tables: - #> • other tables: -"},{"path":"/articles/a03_dbplyr.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"","what":"Putting it all together","title":"CDMConnector and dbplyr","text":"Say want make histogram year birth person table. can select variable, bring memory, use ggplot make histogram.  wanted make boxplot length observation periods computation database side, bring new variable memory, use ggplot produce boxplot","code":"cdm$person %>%   select(year_of_birth) %>%   collect() %>%   ggplot(aes(x = year_of_birth)) +   geom_histogram(bins = 30) cdm$observation_period %>%   select(observation_period_start_date, observation_period_end_date) %>%   mutate(observation_period = (observation_period_end_date - observation_period_start_date)/365, 25) %>%   select(observation_period) %>%   collect() %>%   ggplot(aes(x = observation_period)) +   geom_boxplot()"},{"path":"/articles/a03_dbplyr.html","id":"behind-the-scenes","dir":"Articles","previous_headings":"","what":"Behind the scenes","title":"CDMConnector and dbplyr","text":"use show_query check sql run duckdb","code":"cdm$person %>%   tally() %>%   show_query() #> <SQL> #> SELECT COUNT(*) AS n #> FROM person cdm$person %>%   summarise(median(year_of_birth))%>%   show_query() #> Warning: Missing values are always removed in SQL aggregation functions. #> Use `na.rm = TRUE` to silence this warning #> This warning is displayed once every 8 hours. #> <SQL> #> SELECT MEDIAN(year_of_birth) AS \"median(year_of_birth)\" #> FROM person cdm$person %>%   mutate(gender = case_when(     gender_concept_id == \"8507\" ~ \"Male\",     gender_concept_id == \"8532\" ~ \"Female\",     TRUE ~ NA_character_))%>%   show_query() #> <SQL> #> SELECT #>   person.*, #>   CASE #> WHEN (gender_concept_id = '8507') THEN 'Male' #> WHEN (gender_concept_id = '8532') THEN 'Female' #> ELSE NULL #> END AS gender #> FROM person DBI::dbDisconnect(con, shutdown = TRUE)"},{"path":"/articles/a04_DBI_connection_examples.html","id":"postgres","dir":"Articles","previous_headings":"","what":"Postgres","title":"DBI connection examples","text":"","code":"con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = Sys.getenv(\"CDM5_POSTGRESQL_DBNAME\"),                       host = Sys.getenv(\"CDM5_POSTGRESQL_HOST\"),                       user = Sys.getenv(\"CDM5_POSTGRESQL_USER\"),                       password = Sys.getenv(\"CDM5_POSTGRESQL_PASSWORD\"))  cdm <- cdmFromCon(con,                      cdmSchema = Sys.getenv(\"CDM5_POSTGRESQL_cdmSchema\"),                      writeSchema = Sys.getenv(\"CDM5_POSTGRESQL_SCRATCH_SCHEMA\")) DBI::dbDisconnect(con)"},{"path":"/articles/a04_DBI_connection_examples.html","id":"redshift","dir":"Articles","previous_headings":"","what":"Redshift","title":"DBI connection examples","text":"Redshift almost identical Postgres.","code":"con <- DBI::dbConnect(RPostgres::Redshift(),                       dbname   = Sys.getenv(\"CDM5_REDSHIFT_DBNAME\"),                       host     = Sys.getenv(\"CDM5_REDSHIFT_HOST\"),                       port     = Sys.getenv(\"CDM5_REDSHIFT_PORT\"),                       user     = Sys.getenv(\"CDM5_REDSHIFT_USER\"),                       password = Sys.getenv(\"CDM5_REDSHIFT_PASSWORD\"))  cdm <- cdmFromCon(con,                      cdmSchema = Sys.getenv(\"CDM5_REDSHIFT_cdmSchema\"),                      writeSchema = Sys.getenv(\"CDM5_REDSHIFT_SCRATCH_SCHEMA\")) DBI::dbDisconnect(con)"},{"path":"/articles/a04_DBI_connection_examples.html","id":"sql-server","dir":"Articles","previous_headings":"","what":"SQL Server","title":"DBI connection examples","text":"Using odbc SQL Server requires driver setup described . Note, ’ll likely need download ODBC Driver SQL Server. connection SQL Server can simplified configuring DSN. See instructions set DSN.named “SQL”, connection simplified .","code":"con <- DBI::dbConnect(odbc::odbc(),                       Driver   = \"ODBC Driver 18 for SQL Server\",                       Server   = Sys.getenv(\"CDM5_SQL_SERVER_SERVER\"),                       Database = Sys.getenv(\"CDM5_SQL_SERVER_CDM_DATABASE\"),                       UID      = Sys.getenv(\"CDM5_SQL_SERVER_USER\"),                       PWD      = Sys.getenv(\"CDM5_SQL_SERVER_PASSWORD\"),                       TrustServerCertificate=\"yes\",                       Port     = 1433)  cdm <- cdmFromCon(con,                      cdmSchema = c(\"tempdb\", \"dbo\"),                      writeSchema =  c(\"ATLAS\", \"RESULTS\")) DBI::dbDisconnect(con) con <- DBI::dbConnect(odbc::odbc(), \"SQL\") cdm <- cdmFromCon(con,                      cdmSchema = c(\"tempdb\", \"dbo\"),                      writeSchema =  c(\"ATLAS\", \"RESULTS\")) DBI::dbDisconnect(con)"},{"path":"/articles/a04_DBI_connection_examples.html","id":"snowflake","dir":"Articles","previous_headings":"","what":"Snowflake","title":"DBI connection examples","text":"can use odbc package connect snowflake. Note, SQL server set DSN simplify connection described windows macOS.","code":"con <- DBI::dbConnect(odbc::odbc(),                           SERVER = Sys.getenv(\"SNOWFLAKE_SERVER\"),                           UID = Sys.getenv(\"SNOWFLAKE_USER\"),                           PWD = Sys.getenv(\"SNOWFLAKE_PASSWORD\"),                           DATABASE = Sys.getenv(\"SNOWFLAKE_DATABASE\"),                           WAREHOUSE = Sys.getenv(\"SNOWFLAKE_WAREHOUSE\"),                           DRIVER = Sys.getenv(\"SNOWFLAKE_DRIVER\")) cdm <- cdmFromCon(con,                      cdmSchema =  c(\"OMOP_SYNTHETIC_DATASET\", \"CDM53\"),                      writeSchema =  c(\"ATLAS\", \"RESULTS\")) DBI::dbDisconnect(con)"},{"path":"/articles/a04_DBI_connection_examples.html","id":"databricksspark","dir":"Articles","previous_headings":"","what":"Databricks/Spark","title":"DBI connection examples","text":"Please follow instructions : https://solutions.posit.co/connections/db/databases/databricks/","code":"con <- DBI::dbConnect(   odbc::databricks(),   httpPath = Sys.getenv(\"DATABRICKS_HTTPPATH\"),   useNativeQuery = FALSE )  cdm <- cdmFromCon(con,                    cdmSchema =  \"gibleed\",                    writeSchema = \"scratch\")  DBI::dbDisconnect(con)"},{"path":"/articles/a04_DBI_connection_examples.html","id":"duckdb","dir":"Articles","previous_headings":"","what":"Duckdb","title":"DBI connection examples","text":"Duckdb -process database. use duckdb package connect.","code":"con <- DBI::dbConnect(duckdb::duckdb(),                        dbdir=Sys.getenv(\"CDM5_DUCKDB_FILE\")) cdm <- cdmFromCon(con,                      cdmSchema = \"main\",                      writeSchema = \"main\") DBI::dbDisconnect(con)"},{"path":"/articles/a05_cdm_reference_backends.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"CDM reference backends","text":"CDMConnector package allows us work cdm data different locations consistently. cdm_reference may tables database, files disk, tables loaded R. allows computation take place wherever convenient. schematic CDMConnector can used create cdm_references different locations.","code":""},{"path":"/articles/a05_cdm_reference_backends.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"CDM reference backends","text":"show can work (slightly overcomplicate things show different options), let´s say want create histogram age patients diagnosis tear meniscus knee (concept_id “4035415”). can start database , loading required packages, subset person table people include people condition_occurrence table condition_concept_id “4035415” can save tables file now can create cdm_reference files create age diagnosis variable can bring result R make histogram","code":"library(CDMConnector) library(dplyr, warn.conflicts = FALSE) library(ggplot2) con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) cdm <- cdm_from_con(con, cdm_name = \"eunomia\", cdm_schema = \"main\", write_schema = \"main\")  # first filter to only those with condition_concept_id \"4035415\" cdm$condition_occurrence %>% tally()  cdm$condition_occurrence <- cdm$condition_occurrence %>%   filter(condition_concept_id == \"4035415\") %>%   select(person_id, condition_start_date)  cdm$condition_occurrence %>% tally()  # then left_join person table cdm$person %>% tally() cdm$condition_occurrence %>%   select(person_id) %>%   left_join(select(cdm$person, person_id, year_of_birth), by = \"person_id\") %>%    tally() dOut <- tempfile() dir.create(dOut) CDMConnector::stow(cdm, dOut, format = \"parquet\") cdm_arrow <- cdm_from_files(dOut, as_data_frame = FALSE, cdm_name = \"GiBleed\")  cdm_arrow$person %>%   nrow()  cdm_arrow$condition_occurrence %>%   nrow() result <- cdm_arrow$person %>%   left_join(cdm_arrow$condition_occurrence, by = \"person_id\") %>%   mutate(age_diag = year(condition_start_date) - year_of_birth) %>%   collect() str(result)  result %>%   ggplot(aes(age_diag)) +   geom_histogram() DBI::dbDisconnect(con, shutdown = TRUE)"},{"path":"/articles/a06_using_cdm_attributes.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Using CDM attributes","text":"Let’s load required packages connect Eunomia dataset duckdb.","code":"library(CDMConnector) library(omopgenerics) library(dplyr)  write_schema <- \"main\" cdm_schema <- \"main\"  con <- DBI::dbConnect(duckdb::duckdb(),                        dbdir = eunomiaDir()) cdm <- cdmFromCon(con,                      cdmName = \"eunomia\",                      cdmSchema = cdm_schema,                      writeSchema = write_schema,                      cdmVersion = \"5.3\")"},{"path":"/articles/a06_using_cdm_attributes.html","id":"cdm-reference-attributes","dir":"Articles","previous_headings":"","what":"CDM reference attributes","title":"Using CDM attributes","text":"cdm reference various attributes associated . can useful programming developing analytic packages top CDMConnector.","code":""},{"path":"/articles/a06_using_cdm_attributes.html","id":"cdm-name","dir":"Articles","previous_headings":"CDM reference attributes","what":"CDM name","title":"Using CDM attributes","text":"’s requirement every cdm reference name associated . particularly useful network studies can associate results particular cdm. can use cdmName (’s snake case equivalent cdm_name) get cdm name.","code":"cdmName(cdm) #> [1] \"eunomia\""},{"path":"/articles/a06_using_cdm_attributes.html","id":"cdm-version","dir":"Articles","previous_headings":"CDM reference attributes","what":"CDM version","title":"Using CDM attributes","text":"OMOP CDM various versions. also attribute giving version cdm connected .","code":"cdmVersion(cdm) #> [1] \"5.3\""},{"path":"/articles/a06_using_cdm_attributes.html","id":"database-connection","dir":"Articles","previous_headings":"CDM reference attributes","what":"Database connection","title":"Using CDM attributes","text":"also attribute identifying database connection underlying cdm reference. can useful, example, want make use DBI functions work database. example use dbListTables list names remote tables accessible connection, dbListFields list field names specific remote table, dbGetQuery returns result query","code":"cdmCon(cdm) #> <duckdb_connection 24ef0 driver=<duckdb_driver dbdir='/private/var/folders/2j/8z0yfn1j69q8sxjc7vj9yhz40000gp/T/Rtmp4HTutT/file16a2b5bdb9ab4.duckdb' read_only=FALSE bigint=numeric>> DBI::dbListTables(cdmCon(cdm)) #>  [1] \"care_site\"             \"cdm_source\"            \"concept\"               #>  [4] \"concept_ancestor\"      \"concept_class\"         \"concept_relationship\"  #>  [7] \"concept_synonym\"       \"condition_era\"         \"condition_occurrence\"  #> [10] \"cost\"                  \"death\"                 \"device_exposure\"       #> [13] \"domain\"                \"dose_era\"              \"drug_era\"              #> [16] \"drug_exposure\"         \"drug_strength\"         \"fact_relationship\"     #> [19] \"location\"              \"measurement\"           \"metadata\"              #> [22] \"note\"                  \"note_nlp\"              \"observation\"           #> [25] \"observation_period\"    \"payer_plan_period\"     \"person\"                #> [28] \"procedure_occurrence\"  \"provider\"              \"relationship\"          #> [31] \"source_to_concept_map\" \"specimen\"              \"visit_detail\"          #> [34] \"visit_occurrence\"      \"vocabulary\" DBI::dbListFields(cdmCon(cdm), \"person\") #>  [1] \"person_id\"                   \"gender_concept_id\"           #>  [3] \"year_of_birth\"               \"month_of_birth\"              #>  [5] \"day_of_birth\"                \"birth_datetime\"              #>  [7] \"race_concept_id\"             \"ethnicity_concept_id\"        #>  [9] \"location_id\"                 \"provider_id\"                 #> [11] \"care_site_id\"                \"person_source_value\"         #> [13] \"gender_source_value\"         \"gender_source_concept_id\"    #> [15] \"race_source_value\"           \"race_source_concept_id\"      #> [17] \"ethnicity_source_value\"      \"ethnicity_source_concept_id\" DBI::dbGetQuery(cdmCon(cdm), \"SELECT * FROM person LIMIT 5\") #>   person_id gender_concept_id year_of_birth month_of_birth day_of_birth #> 1         6              8532          1963             12           31 #> 2       123              8507          1950              4           12 #> 3       129              8507          1974             10            7 #> 4        16              8532          1971             10           13 #> 5        65              8532          1967              3           31 #>   birth_datetime race_concept_id ethnicity_concept_id location_id provider_id #> 1     1963-12-31            8516                    0          NA          NA #> 2     1950-04-12            8527                    0          NA          NA #> 3     1974-10-07            8527                    0          NA          NA #> 4     1971-10-13            8527                    0          NA          NA #> 5     1967-03-31            8516                    0          NA          NA #>   care_site_id                  person_source_value gender_source_value #> 1           NA 001f4a87-70d0-435c-a4b9-1425f6928d33                   F #> 2           NA 052d9254-80e8-428f-b8b6-69518b0ef3f3                   M #> 3           NA 054d32d5-904f-4df4-846b-8c08d165b4e9                   M #> 4           NA 00444703-f2c9-45c9-a247-f6317a43a929                   F #> 5           NA 02a3dad9-f9d5-42fb-8074-c16d45b4f5c8                   F #>   gender_source_concept_id race_source_value race_source_concept_id #> 1                        0             black                      0 #> 2                        0             white                      0 #> 3                        0             white                      0 #> 4                        0             white                      0 #> 5                        0             black                      0 #>   ethnicity_source_value ethnicity_source_concept_id #> 1            west_indian                           0 #> 2                italian                           0 #> 3                 polish                           0 #> 4               american                           0 #> 5              dominican                           0"},{"path":[]},{"path":"/articles/a06_using_cdm_attributes.html","id":"generated-cohort-set","dir":"Articles","previous_headings":"Cohort attributes","what":"Generated cohort set","title":"Using CDM attributes","text":"generate cohort addition cohort table also various attributes can useful subsequent analysis. create cohort table single cohort. cohort set attribute gives details settings associated cohorts (along utility functions make easier access attribute). cohort_count attribute counts cohorts. also attribute, cohort attrition, summary attrition creating cohorts.","code":"cdm <- generateConceptCohortSet(cdm = cdm,                                  conceptSet = list(\"gi_bleed\" = 192671,                                                   \"celecoxib\" = 1118084),                                  name = \"study_cohorts\",                                 overwrite = TRUE)  cdm$study_cohorts %>%    glimpse() settings(cdm$study_cohorts) cohortCount(cdm$study_cohorts) attrition(cdm$study_cohorts)"},{"path":"/articles/a06_using_cdm_attributes.html","id":"creating-a-bespoke-cohort","dir":"Articles","previous_headings":"Cohort attributes","what":"Creating a bespoke cohort","title":"Using CDM attributes","text":"Say create custom GI bleed cohort standard cohort structure can add required attributes using newCohortTable function. minimum requirement also define cohort set associate set custom cohorts. Now custom cohort GI_bleed attributes associated created generateConceptCohortSet. allow used analytic packages designed work cdm cohorts.","code":"cdm$gi_bleed <- cdm$condition_occurrence %>%    filter(condition_concept_id == 192671) %>%    mutate(cohort_definition_id = 1) %>%    select(     cohort_definition_id,      subject_id = person_id,      cohort_start_date = condition_start_date,      cohort_end_date = condition_start_date   ) %>%    compute(name = \"gi_bleed\", temporary = FALSE, overwrite = TRUE)  cdm$gi_bleed %>%    glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v1.2.1 [root@Darwin 23.1.0:R 4.3.3//private/var/folders/2j/8z0yfn1j69q8sxjc7vj9yhz40000gp/T/Rtmp4HTutT/file16a2b5bdb9ab4.duckdb] #> $ cohort_definition_id <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ subject_id           <int> 273, 61, 351, 579, 549, 116, 163, 304, 326, 285, … #> $ cohort_start_date    <date> 2011-10-10, 2005-09-15, 2018-06-28, 1999-11-06, … #> $ cohort_end_date      <date> 2011-10-10, 2005-09-15, 2018-06-28, 1999-11-06, … GI_bleed_cohort_ref <- tibble(cohort_definition_id = 1, cohort_name = \"custom_gi_bleed\")  cdm$gi_bleed <- omopgenerics::newCohortTable(   table = cdm$gi_bleed, cohortSetRef = GI_bleed_cohort_ref ) settings(cdm$gi_bleed) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name     #>                  <dbl> <chr>           #> 1                    1 custom_gi_bleed cohortCount(cdm$gi_bleed) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1            479             479 attrition(cdm$gi_bleed) #> # A tibble: 1 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1            479             479         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int>"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam Black. Author, maintainer. Artem Gorbachev. Author. Edward Burn. Author. Marti Catala Sabate. Author. Ioanna Nika. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Black , Gorbachev , Burn E, Catala Sabate M, Nika (2025). CDMConnector: Connect OMOP Common Data Model. R package version 2.1.0, https://github.com/darwin-eu/CDMConnector, https://darwin-eu.github.io/CDMConnector/.","code":"@Manual{,   title = {CDMConnector: Connect to an OMOP Common Data Model},   author = {Adam Black and Artem Gorbachev and Edward Burn and Marti {Catala Sabate} and Ioanna Nika},   year = {2025},   note = {R package version 2.1.0, https://github.com/darwin-eu/CDMConnector},   url = {https://darwin-eu.github.io/CDMConnector/}, }"},{"path":"/index.html","id":"cdmconnector","dir":"","previous_headings":"","what":"Connect to an OMOP Common Data Model","title":"Connect to an OMOP Common Data Model","text":"using tidyverse OMOP Common Data Model? Interact CDM pipe-friendly way CDMConnector. Quickly connect CDM start exploring. Build data analysis pipelines using familiar dplyr verbs. Easily extract subsets CDM data database.","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Connect to an OMOP Common Data Model","text":"CDMConnector introduces single R object represents OMOP CDM relational database inspired dm, DatabaseConnector, Andromeda packages. cdm objects encapsulate references OMOP CDM tables remote RDBMS well metadata necessary interacting CDM, allowing dplyr style data analysis pipelines interactive data exploration.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Connect to an OMOP Common Data Model","text":"CDMConnector meant entry point composable tidyverse style data analysis operations OMOP CDM. cdm_reference object behaves like named list tables. Quickly create list references subset CDM tables Store connection information later use inside functions Use DBI driver back-end OMOP CDM See Getting started details.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Connect to an OMOP Common Data Model","text":"CDMConnector can installed CRAN: development version can installed GitHub:","code":"install.packages(\"CDMConnector\") # install.packages(\"devtools\") devtools::install_github(\"darwin-eu/CDMConnector\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Connect to an OMOP Common Data Model","text":"Create cdm reference DBI connection database containing OMOP CDM tables. Use cdm_schema argument point particular schema database contains OMOP CDM tables write_schema specify schema results tables can created, use cdm_name provide name database. cdm_reference named list table references: Use dplyr verbs table references. Compose operations pipe. much besides. See vignettes explanations create database connections, make cdm reference, start analysing data.","code":"library(CDMConnector)  con <- DBI::dbConnect(duckdb::duckdb(dbdir = eunomiaDir()))  cdm <- cdmFromCon(con = con,                    cdmSchema = \"main\",                    writeSchema = \"main\",                    cdmName = \"my_duckdb_database\") ## Note: method with signature 'DBIConnection#Id' chosen for function 'dbExistsTable', ##  target signature 'duckdb_connection#Id'. ##  \"duckdb_connection#ANY\" would also be valid library(dplyr) names(cdm) ##  [1] \"person\"                \"observation_period\"    \"visit_occurrence\"      ##  [4] \"visit_detail\"          \"condition_occurrence\"  \"drug_exposure\"         ##  [7] \"procedure_occurrence\"  \"device_exposure\"       \"measurement\"           ## [10] \"observation\"           \"death\"                 \"note\"                  ## [13] \"note_nlp\"              \"specimen\"              \"fact_relationship\"     ## [16] \"location\"              \"care_site\"             \"provider\"              ## [19] \"payer_plan_period\"     \"cost\"                  \"drug_era\"              ## [22] \"dose_era\"              \"condition_era\"         \"metadata\"              ## [25] \"cdm_source\"            \"concept\"               \"vocabulary\"            ## [28] \"domain\"                \"concept_class\"         \"concept_relationship\"  ## [31] \"relationship\"          \"concept_synonym\"       \"concept_ancestor\"      ## [34] \"source_to_concept_map\" \"drug_strength\"         \"cohort_definition\"     ## [37] \"attribute_definition\" cdm$person %>%    tally() ## # Source:   SQL [?? x 1] ## # Database: DuckDB v1.2.1 [root@Darwin 24.0.0:R 4.4.1//private/var/folders/ny/8mfpdl611hz7by4z_3kfl3t00000gn/T/RtmpEXDO3x/file3fc05270671.duckdb] ##       n ##   <dbl> ## 1  2694 cdm$condition_era %>%   left_join(cdm$concept, by = c(\"condition_concept_id\" = \"concept_id\")) %>%    count(top_conditions = concept_name, sort = TRUE) ## # Source:     SQL [?? x 2] ## # Database:   DuckDB v1.2.1 [root@Darwin 24.0.0:R 4.4.1//private/var/folders/ny/8mfpdl611hz7by4z_3kfl3t00000gn/T/RtmpEXDO3x/file3fc05270671.duckdb] ## # Ordered by: desc(n) ##    top_conditions                               n ##    <chr>                                    <dbl> ##  1 Viral sinusitis                          17268 ##  2 Acute viral pharyngitis                  10217 ##  3 Acute bronchitis                          8184 ##  4 Otitis media                              3561 ##  5 Osteoarthritis                            2694 ##  6 Streptococcal sore throat                 2656 ##  7 Sprain of ankle                           1915 ##  8 Concussion with no loss of consciousness  1013 ##  9 Sinusitis                                 1001 ## 10 Acute bacterial sinusitis                  939 ## # ℹ more rows"},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Connect to an OMOP Common Data Model","text":"encounter clear bug, please file issue minimal reproducible example GitHub.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Connect to an OMOP Common Data Model","text":"License: Apache 2.0","code":"## To cite package 'CDMConnector' in publications use: ##  ##   Black A, Gorbachev A, Burn E, Catala Sabate M, Nika I (????). ##   _CDMConnector: Connect to an OMOP Common Data Model_. R package ##   version 2.0.0, https://github.com/darwin-eu/CDMConnector, ##   <https://darwin-eu.github.io/CDMConnector/>. ##  ## A BibTeX entry for LaTeX users is ##  ##   @Manual{, ##     title = {CDMConnector: Connect to an OMOP Common Data Model}, ##     author = {Adam Black and Artem Gorbachev and Edward Burn and Marti {Catala Sabate} and Ioanna Nika}, ##     note = {R package version 2.0.0, https://github.com/darwin-eu/CDMConnector}, ##     url = {https://darwin-eu.github.io/CDMConnector/}, ##   }"},{"path":"/reference/CDMConnector-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CDMConnector: Connect to an OMOP Common Data Model — CDMConnector-package","title":"CDMConnector: Connect to an OMOP Common Data Model — CDMConnector-package","text":"Provides tools working observational health data Observational Medical Outcomes Partnership (OMOP) Common Data Model format pipe friendly syntax. Common data model database table references stored single compound object along metadata.","code":""},{"path":[]},{"path":"/reference/CDMConnector-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CDMConnector: Connect to an OMOP Common Data Model — CDMConnector-package","text":"Maintainer: Adam Black black@ohdsi.org (ORCID) Authors: Artem Gorbachev artem.gorbachev@odysseusinc.com Edward Burn edward.burn@ndorms.ox.ac.uk Marti Catala Sabate marti.catalasabate@ndorms.ox.ac.uk Ioanna Nika .nika@darwin-eu.org","code":""},{"path":"/reference/appendPermanent.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a dplyr query and add the result set to an existing — appendPermanent","title":"Run a dplyr query and add the result set to an existing — appendPermanent","text":"Run dplyr query add result set existing","code":""},{"path":"/reference/appendPermanent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a dplyr query and add the result set to an existing — appendPermanent","text":"","code":"appendPermanent(x, name, schema = NULL)"},{"path":"/reference/appendPermanent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a dplyr query and add the result set to an existing — appendPermanent","text":"x dplyr query name Name table appended. already exist created. schema Schema table exists. Can length 1 2 vector. (e.g. schema = \"my_schema\", schema = c(\"my_schema\", \"dbo\"))","code":""},{"path":"/reference/appendPermanent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a dplyr query and add the result set to an existing — appendPermanent","text":"dplyr reference newly created table","code":""},{"path":"/reference/appendPermanent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a dplyr query and add the result set to an existing — appendPermanent","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector)  con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) concept <- dplyr::tbl(con, \"concept\")  # create a table rxnorm_count <- concept %>%   dplyr::filter(domain_id == \"Drug\") %>%   dplyr::mutate(isRxnorm = (vocabulary_id == \"RxNorm\")) %>%   dplyr::count(domain_id, isRxnorm) %>%   compute(\"rxnorm_count\")  # append to an existing table rxnorm_count <- concept %>%   dplyr::filter(domain_id == \"Procedure\") %>%   dplyr::mutate(isRxnorm = (vocabulary_id == \"RxNorm\")) %>%   dplyr::count(domain_id, isRxnorm) %>%   appendPermanent(\"rxnorm_count\")  DBI::dbDisconnect(con, shutdown = TRUE)  } # }"},{"path":"/reference/asDate.html","id":null,"dir":"Reference","previous_headings":"","what":"as.Date dbplyr translation wrapper — asDate","title":"as.Date dbplyr translation wrapper — asDate","text":"workaround using .Date inside dplyr verbs database backend. function used inside dplyr verbs first argument database table reference. asDate must unquoted !! inside dplyr verbs (see example).","code":""},{"path":"/reference/asDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"as.Date dbplyr translation wrapper — asDate","text":"","code":"asDate(x)"},{"path":"/reference/asDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"as.Date dbplyr translation wrapper — asDate","text":"x R expression","code":""},{"path":"/reference/asDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"as.Date dbplyr translation wrapper — asDate","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(odbc::odbc(), \"Oracle\") date_tbl <- dplyr::copy_to(con,                            data.frame(y = 2000L, m = 10L, d = 10L),                            name = \"tmp\",                            temporary = TRUE)  df <- date_tbl %>%   dplyr::mutate(date_from_parts = !!asDate(paste0(     .data$y, \"/\",     .data$m, \"/\",     .data$d   ))) %>%   dplyr::collect() } # }"},{"path":"/reference/assertTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that tables exist in a cdm object — assertTables","title":"Assert that tables exist in a cdm object — assertTables","text":"cdm object list references subset tables OMOP Common Data Model. write function accepts cdm object parameter assert_tables/assertTables help check tables need cdm object, correct columns/fields, (optionally) empty.","code":""},{"path":"/reference/assertTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that tables exist in a cdm object — assertTables","text":"","code":"assertTables(cdm, tables, empty.ok = FALSE, add = NULL)  assert_tables(cdm, tables, empty.ok = FALSE, add = NULL)"},{"path":"/reference/assertTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that tables exist in a cdm object — assertTables","text":"cdm cdm object tables character vector table names check. empty.ok empty table (0 rows) considered error? TRUE FALSE (default) add optional AssertCollection created checkmate::makeAssertCollection() errors added .","code":""},{"path":"/reference/assertTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that tables exist in a cdm object — assertTables","text":"Invisibly returns cdm object","code":""},{"path":[]},{"path":"/reference/assertTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that tables exist in a cdm object — assertTables","text":"","code":"if (FALSE) { # \\dontrun{ # Use assertTables inside a function to check that tables exist countDrugsByGender <- function(cdm) {   assertTables(cdm, tables = c(\"person\", \"drug_era\"), empty.ok = FALSE)    cdm$person %>%     dplyr::inner_join(cdm$drug_era, by = \"person_id\") %>%     dplyr::count(.data$gender_concept_id, .data$drug_concept_id) %>%     dplyr::collect() }  library(CDMConnector) con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) cdm <- cdmFromCon(con)  countDrugsByGender(cdm)  DBI::dbDisconnect(con, shutdown = TRUE)  } # }"},{"path":"/reference/assert_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that tables exist in a cdm object — assert_tables","title":"Assert that tables exist in a cdm object — assert_tables","text":"cdm object list references subset tables OMOP Common Data Model. write function accepts cdm object parameter assert_tables/assertTables help check tables need cdm object, correct columns/fields, (optionally) empty.","code":""},{"path":"/reference/assert_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that tables exist in a cdm object — assert_tables","text":"","code":"assert_tables(cdm, tables, empty.ok = FALSE, add = NULL)  assertTables(cdm, tables, empty.ok = FALSE, add = NULL)"},{"path":"/reference/assert_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that tables exist in a cdm object — assert_tables","text":"cdm cdm object tables character vector table names check. empty.ok empty table (0 rows) considered error? TRUE FALSE (default) add optional AssertCollection created checkmate::makeAssertCollection() errors added .","code":""},{"path":"/reference/assert_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that tables exist in a cdm object — assert_tables","text":"Invisibly returns cdm object","code":""},{"path":"/reference/assert_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that tables exist in a cdm object — assert_tables","text":"","code":"if (FALSE) { # \\dontrun{ # Use assertTables inside a function to check that tables exist countDrugsByGender <- function(cdm) {   assertTables(cdm, tables = c(\"person\", \"drug_era\"), empty.ok = FALSE)    cdm$person %>%     dplyr::inner_join(cdm$drug_era, by = \"person_id\") %>%     dplyr::count(.data$gender_concept_id, .data$drug_concept_id) %>%     dplyr::collect() }  library(CDMConnector) con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) cdm <- cdm_from_con(con)  countDrugsByGender(cdm)  DBI::dbDisconnect(con, shutdown = TRUE)  } # }"},{"path":"/reference/assert_write_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that cdm has a writable schema — assert_write_schema","title":"Assert that cdm has a writable schema — assert_write_schema","text":"cdm object can optionally contain single schema database write access. assert_write_schema checks cdm contains \"write_schema\" attribute tests local dataframes can written tables schema.","code":""},{"path":"/reference/assert_write_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that cdm has a writable schema — assert_write_schema","text":"","code":"assert_write_schema(cdm, add = NULL)  assertWriteSchema(cdm, add = NULL)"},{"path":"/reference/assert_write_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that cdm has a writable schema — assert_write_schema","text":"cdm cdm object add optional AssertCollection created checkmate::makeAssertCollection() errors added .","code":""},{"path":"/reference/assert_write_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that cdm has a writable schema — assert_write_schema","text":"Invisibly returns cdm object","code":""},{"path":[]},{"path":"/reference/benchmarkCDMConnector.html","id":null,"dir":"Reference","previous_headings":"","what":"Run benchmark of tasks using CDMConnector — benchmarkCDMConnector","title":"Run benchmark of tasks using CDMConnector — benchmarkCDMConnector","text":"Run benchmark tasks using CDMConnector","code":""},{"path":"/reference/benchmarkCDMConnector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run benchmark of tasks using CDMConnector — benchmarkCDMConnector","text":"","code":"benchmarkCDMConnector(cdm)"},{"path":"/reference/benchmarkCDMConnector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run benchmark of tasks using CDMConnector — benchmarkCDMConnector","text":"cdm CDM reference object","code":""},{"path":"/reference/benchmarkCDMConnector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run benchmark of tasks using CDMConnector — benchmarkCDMConnector","text":"tibble time taken different analyses","code":""},{"path":"/reference/benchmarkCDMConnector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run benchmark of tasks using CDMConnector — benchmarkCDMConnector","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir()) cdm <- cdmFromCon(con, cdmSchema = \"main\", writeSchema = \"main\") benchmarkCDMConnector(cdm)  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/cash-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cdm reference object — $.cdm_reference","title":"Subset a cdm reference object — $.cdm_reference","text":"Subset cdm reference object","code":""},{"path":"/reference/cash-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cdm reference object — $.cdm_reference","text":"","code":"# S3 method for cdm_reference $(x, name)"},{"path":"/reference/cash-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cdm reference object — $.cdm_reference","text":"x cdm reference name name table extract cdm object","code":""},{"path":"/reference/cash-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cdm reference object — $.cdm_reference","text":"single cdm table reference","code":""},{"path":"/reference/cdmCon.html","id":null,"dir":"Reference","previous_headings":"","what":"Get underlying database connection — cdmCon","title":"Get underlying database connection — cdmCon","text":"Get underlying database connection","code":""},{"path":"/reference/cdmCon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get underlying database connection — cdmCon","text":"","code":"cdmCon(cdm)"},{"path":"/reference/cdmCon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get underlying database connection — cdmCon","text":"cdm cdm reference object created cdmFromCon","code":""},{"path":"/reference/cdmCon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get underlying database connection — cdmCon","text":"reference database containing tables cdm reference","code":""},{"path":"/reference/cdmCon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get underlying database connection — cdmCon","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir())  cdm <- cdmFromCon(con = con, cdmName = \"Eunomia\",                   cdmSchema =  \"main\", writeSchema = \"main\")  cdmCon(cdm)  DBI::dbDisconnect(con) } # }"},{"path":"/reference/cdmDisconnect.db_cdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Disconnect the connection of the cdm object — cdmDisconnect.db_cdm","title":"Disconnect the connection of the cdm object — cdmDisconnect.db_cdm","text":"function disconnect database well drop \"temporary\" tables created database systems support actual temporary tables. Currently temp tables emulated Spark/Databricks systems.","code":""},{"path":"/reference/cdmDisconnect.db_cdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disconnect the connection of the cdm object — cdmDisconnect.db_cdm","text":"","code":"# S3 method for class 'db_cdm' cdmDisconnect(cdm, dropWriteSchema = FALSE, ...)"},{"path":"/reference/cdmDisconnect.db_cdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disconnect the connection of the cdm object — cdmDisconnect.db_cdm","text":"cdm cdm reference dropWriteSchema Whether drop tables writeSchema ... used","code":""},{"path":"/reference/cdmFlatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a cdm into a single observation table — cdmFlatten","title":"Flatten a cdm into a single observation table — cdmFlatten","text":"experimental function transforms OMOP CDM single observation table. recommended use filtered CDM cdm small size.","code":""},{"path":"/reference/cdmFlatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a cdm into a single observation table — cdmFlatten","text":"","code":"cdmFlatten(   cdm,   domain = c(\"condition_occurrence\", \"drug_exposure\", \"procedure_occurrence\"),   includeConceptName = TRUE )"},{"path":"/reference/cdmFlatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a cdm into a single observation table — cdmFlatten","text":"cdm cdm_reference object domain Domains include. Must subset \"condition_occurrence\", \"drug_exposure\", \"procedure_occurrence\", \"measurement\", \"visit_occurrence\", \"death\", \"observation\" includeConceptName concept_name type_concept_name include output table? TRUE (default) FALSE","code":""},{"path":"/reference/cdmFlatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a cdm into a single observation table — cdmFlatten","text":"lazy query evaluated result single table","code":""},{"path":"/reference/cdmFlatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a cdm into a single observation table — cdmFlatten","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) library(dplyr, warn.conflicts = FALSE)  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir())  cdm <- cdmFromCon(con, cdmSchema = \"main\")  all_observations <- cdmSubset(cdm, personId = c(2, 18, 42)) %>%   cdmFlatten() %>%   collect()  all_observations #> # A tibble: 213 × 8 #>    person_id observation_.  start_date end_date   type_.  domain obser.  type_. #>        <dbl>          <dbl> <date>     <date>       <dbl> <chr>  <chr>   <chr> #>  1         2       40213201 1986-09-09 1986-09-09  5.81e5 drug   pneumo  <NA> #>  2        18        4116491 1997-11-09 1998-01-09  3.20e4 condi  Escher  <NA> #>  3        18       40213227 2017-01-04 2017-01-04  5.81e5 drug   tetanu  <NA> #>  4        42        4156265 1974-06-13 1974-06-27  3.20e4 condi  Facial  <NA> #>  5        18       40213160 1966-02-23 1966-02-23  5.81e5 drug   poliov  <NA> #>  6        42        4198190 1933-10-29 1933-10-29  3.80e7 proce  Append  <NA> #>  7         2        4109685 1952-07-13 1952-07-27  3.20e4 condi  Lacera  <NA> #>  8        18       40213260 2017-01-04 2017-01-04  5.81e5 drug   zoster  <NA> #>  9        42        4151422 1985-02-03 1985-02-03  3.80e7 proce  Sputum  <NA> #> 10         2        4163872 1993-03-29 1993-03-29  3.80e7 proce  Plain   <NA> #> # ... with 203 more rows, and abbreviated variable names observation_concept_id, #> #   type_concept_id, observation_concept_name, type_concept_name  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/cdmFromCon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a CDM reference object from a database connection — cdmFromCon","title":"Create a CDM reference object from a database connection — cdmFromCon","text":"Create CDM reference object database connection","code":""},{"path":"/reference/cdmFromCon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CDM reference object from a database connection — cdmFromCon","text":"","code":"cdmFromCon(   con,   cdmSchema,   writeSchema,   cohortTables = NULL,   cdmVersion = NULL,   cdmName = NULL,   achillesSchema = NULL,   .softValidation = FALSE,   writePrefix = NULL )"},{"path":"/reference/cdmFromCon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CDM reference object from a database connection — cdmFromCon","text":"con DBI database connection database OMOP CDM v5.4 v5.3 instance located. cdmSchema schema OMOP CDM tables located. Defaults NULL. writeSchema optional schema CDM database user write access . cohortTables character vector listing cohort table names included CDM object. cdmVersion version OMOP CDM. Cam \"5.3\", \"5.4\", NULL (default). NULL attempt automatically determine cdm version using cdm_source table heuristics. cdmName name CDM. NULL (default) cdm_source_name .  field CDM_SOURCE table used. achillesSchema optional schema CDM database contains achilles tables. .softValidation Normally observation period table overlapping observation periods single person. .softValidation TRUE validation check looks overlapping observation periods skipped. analytic packages may break produce incorrect results softValidation TRUE observation period table contains overlapping observation periods. writePrefix prefix added tables created write_schema. can used create namespace database write_schema tables.","code":""},{"path":"/reference/cdmFromCon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CDM reference object from a database connection — cdmFromCon","text":"list dplyr database table references pointing CDM tables","code":""},{"path":"/reference/cdmFromCon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a CDM reference object from a database connection — cdmFromCon","text":"cdmFromCon creates new cdm reference object DBI database connection. addition connection user needs pass schema database cdm data can found well another schema user write access create tables. Nearly downstream analytic packages need ability create temporary data database write_schema required. database systems idea catalog compound schema two components. See examples pass catalogs schemas. can also specify writePrefix. short character string added tables created writeSchema effectively namespace schema just analysis. write_schema shared multiple users setting unique write_prefix ensures overwrite existing tables allows easily clean tables dropping tables start prefix.","code":""},{"path":"/reference/cdmFromCon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a CDM reference object from a database connection — cdmFromCon","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir())  # minimal example cdm <- cdmFromCon(con,                   cdmSchema = \"main\",                   writeSchema = \"scratch\")  # write prefix is optional but recommended if write_schema is shared cdm <- cdmFromCon(con,                   cdmSchema = \"main\",                   writeSchema = \"scratch\",                   writePrefix = \"tmp_\")  # Some database systems use catalogs or compound schemas. # These can be specified as follows: cdm <- cdmFromCon(con,                   cdmSchema = \"catalog.main\",                   writeSchema = \"catalog.scratch\",                   writePrefix = \"tmp_\")  cdm <- cdmFromCon(con,                   cdmSchema = c(\"my_catalog\", \"main\"),                   writeSchema = c(\"my_catalog\", \"scratch\"),                   writePrefix = \"tmp_\")  cdm <- cdmFromCon(con,                   cdmSchema = c(catalog = \"my_catalog\", schema = \"main\"),                   writeSchema = c(catalog = \"my_catalog\", schema = \"scratch\"),                   writePrefix = \"tmp_\")   DBI::dbDisconnect(con) } # }"},{"path":"/reference/cdmFromEnvironment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a CDM object from a pre-defined set of environment variables — cdmFromEnvironment","title":"Create a CDM object from a pre-defined set of environment variables — cdmFromEnvironment","text":"function intended used Darwin execution engine. execution engine runs OHDSI studies pre-defined runtime environment makes several environment variables available connecting CDM database. Programmer writing code run execution engine simply use cdm <- cdmFromEnvironment() create cdm reference object use analysis database connection cdm object automatically created. obviates need site specific code connecting database creating cdm reference object.","code":""},{"path":"/reference/cdmFromEnvironment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CDM object from a pre-defined set of environment variables — cdmFromEnvironment","text":"","code":"cdmFromEnvironment(writePrefix = \"\")  cdm_from_environment(write_prefix = \"\")"},{"path":"/reference/cdmFromEnvironment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CDM object from a pre-defined set of environment variables — cdmFromEnvironment","text":"write_prefix, writePrefix (string) optional prefix use tables written CDM.","code":""},{"path":"/reference/cdmFromEnvironment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CDM object from a pre-defined set of environment variables — cdmFromEnvironment","text":"cdm_reference object","code":""},{"path":"/reference/cdmFromEnvironment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a CDM object from a pre-defined set of environment variables — cdmFromEnvironment","text":"environment variables used function provided execution engine listed . DBMS_TYPE: one \"postgresql\", \"sql server\", \"redshift\", \"duckdb\", \"snowflake\". DATA_SOURCE_NAME: free text name CDM given person running study. CDM_VERSION: one \"5.3\", \"5.4\". DBMS_CATALOG: database catalog. Important primarily compound schema names used SQL Server Snowflake. DBMS_SERVER: database server URL. DBMS_NAME: database name used creating connection. DBMS_PORT: database port number. DBMS_USERNAME: database username needed authenticate. DBMS_PASSWORD: database password needed authenticate. CDM_SCHEMA: schema name OMOP CDM located database. WRITE_SCHEMA: shema user write access tables created study execution.","code":""},{"path":"/reference/cdmFromEnvironment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a CDM object from a pre-defined set of environment variables — cdmFromEnvironment","text":"","code":"if (FALSE) { # \\dontrun{  library(CDMConnector)  # This will only work in an evironment where the proper variables are present. cdm <- cdmFromEnvironment()  # Proceed with analysis using the cdm object.  # Close the database connection when done. cdmDisconnect(cdm) } # }"},{"path":[]},{"path":"/reference/cdmFromFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CDM reference from a folder containing parquet, csv, or feather files — cdmFromFiles","text":"","code":"cdmFromFiles(   path,   format = \"auto\",   cdmVersion = \"5.3\",   cdmName = NULL,   asDataFrame = TRUE )  cdm_from_files(   path,   format = \"auto\",   cdm_version = \"5.3\",   cdm_name = NULL,   as_data_frame = TRUE )"},{"path":"/reference/cdmFromFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CDM reference from a folder containing parquet, csv, or feather files — cdmFromFiles","text":"path folder OMOP CDM v5.4 instance located. format file format read ? Must \"auto\" (default), \"parquet\", \"csv\", \"feather\". cdm_version, cdmVersion version cdm (5.3 5.4) cdm_name, cdmName name use cdm. as_data_frame, asDataFrame TRUE (default) read files R dataframes. FALSE read files R Arrow Datasets.","code":""},{"path":"/reference/cdmFromFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CDM reference from a folder containing parquet, csv, or feather files — cdmFromFiles","text":"list dplyr database table references pointing CDM tables","code":""},{"path":"/reference/cdmSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cdm object to a random sample of individuals — cdmSample","title":"Subset a cdm object to a random sample of individuals — cdmSample","text":"cdmSample takes cdm object returns new cdm includes random sample persons cdm. person_ids person table observation_period table considered.","code":""},{"path":"/reference/cdmSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cdm object to a random sample of individuals — cdmSample","text":"","code":"cdmSample(cdm, n, seed = sample.int(1e+06, 1), name = \"person_sample\")"},{"path":"/reference/cdmSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cdm object to a random sample of individuals — cdmSample","text":"cdm cdm_reference object. n Number persons include cdm. seed Seed random number generator. name Name table contain sample persons.","code":""},{"path":"/reference/cdmSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cdm object to a random sample of individuals — cdmSample","text":"modified cdm_reference object clinical tables lazy queries pointing subset","code":""},{"path":"/reference/cdmSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a cdm object to a random sample of individuals — cdmSample","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) library(dplyr, warn.conflicts = FALSE)  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir())  cdm <- cdmFromCon(con, cdmSchema = \"main\")  cdmSampled <- cdmSample(cdm, n = 2)  cdmSampled$person %>%   select(person_id) #> # Source:   SQL [2 x 1] #> # Database: DuckDB 0.6.1 #>   person_id #>       <dbl> #> 1       155 #> 2      3422  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/cdmSelectTbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a subset of tables in a cdm reference object — cdmSelectTbl","title":"Select a subset of tables in a cdm reference object — cdmSelectTbl","text":"function uses syntax similar dplyr::select can used subset cdm reference object specific tables","code":""},{"path":"/reference/cdmSelectTbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a subset of tables in a cdm reference object — cdmSelectTbl","text":"","code":"cdmSelectTbl(cdm, ...)  cdm_select_tbl(cdm, ...)"},{"path":"/reference/cdmSelectTbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a subset of tables in a cdm reference object — cdmSelectTbl","text":"cdm cdm reference object created cdm_from_con ... One table names tables cdm object. tidyselect supported, see dplyr::select() details semantics.","code":""},{"path":"/reference/cdmSelectTbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a subset of tables in a cdm reference object — cdmSelectTbl","text":"cdm reference object containing selected tables","code":""},{"path":"/reference/cdmSelectTbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a subset of tables in a cdm reference object — cdmSelectTbl","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir())  cdm <- cdmFromCon(con, \"main\")  cdmSelectTbl(cdm, person) cdmSelectTbl(cdm, person, observation_period) cdmSelectTbl(cdm, tblGroup(\"vocab\")) cdmSelectTbl(cdm, \"person\")  DBI::dbDisconnect(con) } # }"},{"path":"/reference/cdmSubset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cdm object to a set of persons — cdmSubset","title":"Subset a cdm object to a set of persons — cdmSubset","text":"cdmSubset takes cdm object list person IDs input. returns new cdm includes data persons matching provided person IDs. Generated cohorts cdm also subset IDs provided.","code":""},{"path":"/reference/cdmSubset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cdm object to a set of persons — cdmSubset","text":"","code":"cdmSubset(cdm, personId)"},{"path":"/reference/cdmSubset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cdm object to a set of persons — cdmSubset","text":"cdm cdm_reference object personId numeric vector person IDs include cdm","code":""},{"path":"/reference/cdmSubset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cdm object to a set of persons — cdmSubset","text":"modified cdm_reference object clinical tables lazy queries pointing subset","code":""},{"path":"/reference/cdmSubset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a cdm object to a set of persons — cdmSubset","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) library(dplyr, warn.conflicts = FALSE)  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir())  cdm <- cdmFromCon(con, cdmSchema = \"main\")  cdm2 <- cdmSubset(cdm, personId = c(2, 18, 42))  cdm2$person %>%   select(1:3) #> # Source:   SQL [3 x 3] #> # Database: DuckDB 0.6.1 #>   person_id gender_concept_id year_of_birth #>       <dbl>             <dbl>         <dbl> #> 1         2              8532          1920 #> 2        18              8532          1965 #> 3        42              8532          1909  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/cdmSubsetCohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cdm to the individuals in one or more cohorts — cdmSubsetCohort","title":"Subset a cdm to the individuals in one or more cohorts — cdmSubsetCohort","text":"cdmSubset return new cdm object contains lazy queries pointing cdm tables subset individuals generated cohort. Since cdm tables lazy queries, subset operation done tables used. computeQuery can used run SQL used subset cdm table store new table database.","code":""},{"path":"/reference/cdmSubsetCohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cdm to the individuals in one or more cohorts — cdmSubsetCohort","text":"","code":"cdmSubsetCohort(cdm, cohortTable = \"cohort\", cohortId = NULL, verbose = FALSE)"},{"path":"/reference/cdmSubsetCohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cdm to the individuals in one or more cohorts — cdmSubsetCohort","text":"cdm cdm_reference object cohortTable name cohort table cdm reference cohortId IDs cohorts want subset cohort table. NULL (default) cohorts cohort table considered. verbose subset messages printed? TRUE FALSE (default)","code":""},{"path":"/reference/cdmSubsetCohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cdm to the individuals in one or more cohorts — cdmSubsetCohort","text":"modified cdm_reference clinical tables subset just persons selected cohorts.","code":""},{"path":"/reference/cdmSubsetCohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a cdm to the individuals in one or more cohorts — cdmSubsetCohort","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) library(dplyr, warn.conflicts = FALSE)  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir())  cdm <- cdmFromCon(con, cdmSchema = \"main\", writeSchema = \"main\")  # generate a cohort path <- system.file(\"cohorts2\", mustWork = TRUE, package = \"CDMConnector\")  cohortSet <- readCohortSet(path) %>%   filter(cohort_name == \"GIBleed_male\")  # subset cdm to persons in the generated cohort cdm <- generateCohortSet(cdm, cohortSet = cohortSet, name = \"gibleed\")  cdmGiBleed <- cdmSubsetCohort(cdm, cohortTable = \"gibleed\")  cdmGiBleed$person %>%   tally() #> # Source:   SQL [1 x 1] #> # Database: DuckDB 0.6.1 #>       n #>   <dbl> #> 1   237  cdm$person %>%   tally() #> # Source:   SQL [1 x 1] #> # Database: DuckDB 0.6.1 #>       n #>   <dbl> #> 1  2694   DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/cdmWriteSchema.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cdm write schema — cdmWriteSchema","title":"Get cdm write schema — cdmWriteSchema","text":"Get cdm write schema","code":""},{"path":"/reference/cdmWriteSchema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cdm write schema — cdmWriteSchema","text":"","code":"cdmWriteSchema(cdm)"},{"path":"/reference/cdmWriteSchema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cdm write schema — cdmWriteSchema","text":"cdm cdm reference object created cdmFromCon","code":""},{"path":"/reference/cdmWriteSchema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cdm write schema — cdmWriteSchema","text":"database write schema","code":""},{"path":"/reference/cdmWriteSchema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cdm write schema — cdmWriteSchema","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir())  cdm <- cdmFromCon(con = con, cdmName = \"Eunomia\",                   cdmSchema =  \"main\", writeSchema = \"main\")  cdmWriteSchema(cdm)  DBI::dbDisconnect(con) } # }"},{"path":"/reference/cdm_from_con.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a CDM reference object from a database connection — cdm_from_con","title":"Create a CDM reference object from a database connection — cdm_from_con","text":"Create CDM reference object database connection","code":""},{"path":"/reference/cdm_from_con.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CDM reference object from a database connection — cdm_from_con","text":"","code":"cdm_from_con(   con,   cdm_schema,   write_schema,   cohort_tables = NULL,   cdm_version = \"5.3\",   cdm_name = NULL,   achilles_schema = NULL,   .soft_validation = FALSE,   write_prefix = NULL )  cdmFromCon(   con,   cdmSchema,   writeSchema,   cohortTables = NULL,   cdmVersion = \"5.3\",   cdmName = NULL,   achillesSchema = NULL,   .softValidation = FALSE,   writePrefix = NULL )"},{"path":"/reference/cdm_from_con.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CDM reference object from a database connection — cdm_from_con","text":"con DBI database connection database OMOP CDM v5.4 v5.3 instance located. cdm_schema, cdmSchema schema OMOP CDM tables located. Defaults NULL. write_schema, writeSchema optional schema CDM database user write access . cohort_tables, cohortTables character vector listing cohort table names included CDM object. cdm_version, cdmVersion version OMOP CDM: \"5.3\" (default), \"5.4\", \"auto\". \"auto\" attempts automatically determine cdm version using heuristics. Cohort tables must write_schema. cdm_name, cdmName name CDM. NULL (default) cdm_source_name .  field CDM_SOURCE table used. achilles_schema, achillesSchema optional schema CDM database contains achilles tables. .soft_validation, .softValidation Normally observation period table overlapping observation periods single person. .softValidation TRUE validation check looks overlapping observation periods skipped. analytic packages may break produce incorrect results softValidation TRUE observation period table contains overlapping observation periods. write_prefix, writePrefix prefix added tables created write_schema. can used create namespace database write_schema tables.","code":""},{"path":"/reference/cdm_from_con.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CDM reference object from a database connection — cdm_from_con","text":"list dplyr database table references pointing CDM tables","code":""},{"path":"/reference/cdm_from_con.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a CDM reference object from a database connection — cdm_from_con","text":"cdm_from_con / cdmFromCon creates new cdm reference object DBI database connection. addition connection user needs pass schema database cdm data can found well another schema user write access create tables. Nearly downstream analytic packages need ability create temporary data database write_schema required. database systems idea catalog compound schema two components. See examples pass catalogs schemas. can also specify write_prefix. short character string added tables created write_schema effectively namespace schema just analysis. write_schema shared multiple users setting unique write_prefix ensures overwrite existing tables allows easily clean tables dropping tables start prefix.","code":""},{"path":"/reference/cdm_from_con.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a CDM reference object from a database connection — cdm_from_con","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir())  # minimal example cdm <- cdm_from_con(con,                     cdm_schema = \"main\",                     write_schema = \"scratch\")  # write prefix is optional but recommended if write_schema is shared cdm <- cdm_from_con(con,                     cdm_schema = \"main\",                     write_schema = \"scratch\",                     write_prefix = \"tmp_\")  # Some database systems use catalogs or compound schemas. # These can be specified as follows: cdm <- cdm_from_con(con,                     cdm_schema = \"catalog.main\",                     write_schema = \"catalog.scratch\",                     write_prefix = \"tmp_\")  cdm <- cdm_from_con(con,                     cdm_schema = c(\"my_catalog\", \"main\"),                     write_schema = c(\"my_catalog\", \"scratch\"),                     write_prefix = \"tmp_\")  cdm <- cdm_from_con(con,                     cdm_schema = c(catalog = \"my_catalog\", schema = \"main\"),                     write_schema = c(catalog = \"my_catalog\", schema = \"scratch\"),                     write_prefix = \"tmp_\")   DBI::dbDisconnect(con) } # }"},{"path":"/reference/cdm_from_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a CDM object from a pre-defined set of environment variables — cdm_from_environment","title":"Create a CDM object from a pre-defined set of environment variables — cdm_from_environment","text":"function intended used Darwin execution engine. execution engine runs OHDSI studies pre-defined runtime environment makes several environment variables available connecting CDM database. Programmer writing code run execution engine simply use cdm <- cdm_from_environment() create cdm reference object use analysis database connection cdm object automatically created. obviates need site specific code connecting database creating cdm reference object.","code":""},{"path":"/reference/cdm_from_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CDM object from a pre-defined set of environment variables — cdm_from_environment","text":"","code":"cdm_from_environment(write_prefix = \"\")"},{"path":"/reference/cdm_from_environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CDM object from a pre-defined set of environment variables — cdm_from_environment","text":"write_prefix (string) optional prefix use tables written CDM.","code":""},{"path":"/reference/cdm_from_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CDM object from a pre-defined set of environment variables — cdm_from_environment","text":"cdm_reference object","code":""},{"path":"/reference/cdm_from_environment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a CDM object from a pre-defined set of environment variables — cdm_from_environment","text":"environment variables used function provided execution engine listed . DBMS_TYPE: one \"postgresql\", \"sql server\", \"redshift\", \"duckdb\", \"snowflake\". DATA_SOURCE_NAME: free text name CDM given person running study. CDM_VERSION: one \"5.3\", \"5.4\". DBMS_CATALOG: database catalog. Important primarily compound schema names used SQL Server Snowflake. DBMS_SERVER: database server URL. DBMS_NAME: database name used creating connection. DBMS_PORT: database port number. DBMS_USERNAME: database username needed authenticate. DBMS_PASSWORD: database password needed authenticate. CDM_SCHEMA: schema name OMOP CDM located database. WRITE_SCHEMA: shema user write access tables created study execution.","code":""},{"path":"/reference/cdm_from_environment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a CDM object from a pre-defined set of environment variables — cdm_from_environment","text":"","code":"if (FALSE) { # \\dontrun{  library(CDMConnector)  # This will only work in an evironment where the proper variables are present. cdm <- cdm_from_environment()  # Proceed with analysis using the cdm object.  # Close the database connection when done. cdm_disconnect(cdm) } # }"},{"path":"/reference/cdm_from_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a CDM reference from a folder containing parquet, csv, or feather files — cdm_from_files","title":"Create a CDM reference from a folder containing parquet, csv, or feather files — cdm_from_files","text":"Create CDM reference folder containing parquet, csv, feather files","code":""},{"path":"/reference/cdm_from_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CDM reference from a folder containing parquet, csv, or feather files — cdm_from_files","text":"","code":"cdm_from_files(   path,   format = \"auto\",   cdm_version = \"5.3\",   cdm_name = NULL,   as_data_frame = TRUE )  cdmFromFiles(   path,   format = \"auto\",   cdmVersion = \"5.3\",   cdmName = NULL,   asDataFrame = TRUE )"},{"path":"/reference/cdm_from_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CDM reference from a folder containing parquet, csv, or feather files — cdm_from_files","text":"path folder OMOP CDM v5.4 instance located. format file format read ? Must \"auto\" (default), \"parquet\", \"csv\", \"feather\". cdm_version, cdmVersion version cdm (5.3 5.4) cdm_name, cdmName name use cdm. as_data_frame, asDataFrame TRUE (default) read files R dataframes. FALSE read files R Arrow Datasets.","code":""},{"path":"/reference/cdm_from_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CDM reference from a folder containing parquet, csv, or feather files — cdm_from_files","text":"list dplyr database table references pointing CDM tables","code":""},{"path":[]},{"path":"/reference/cdm_from_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cdm object from local tables — cdm_from_tables","text":"","code":"cdm_from_tables(tables, cdm_name, cohort_tables = list(), cdm_version = NULL)"},{"path":"/reference/cdm_from_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cdm object from local tables — cdm_from_tables","text":"tables List tables part cdm object. cdm_name Name cdm object. cohort_tables List tables contains cohort, cohort_set cohort_attrition can provided attributes. cdm_version Version cdm_reference","code":""},{"path":"/reference/cdm_from_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cdm object from local tables — cdm_from_tables","text":"cdm_reference object.","code":""},{"path":"/reference/cdm_from_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a cdm object from local tables — cdm_from_tables","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector)  person <- dplyr::tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2025-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" ) } # }"},{"path":"/reference/cdm_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the CDM name — cdm_name","title":"Get the CDM name — cdm_name","text":"Extract CDM name attribute cdm_reference object","code":""},{"path":"/reference/cdm_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the CDM name — cdm_name","text":"","code":"cdm_name(cdm)"},{"path":"/reference/cdm_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the CDM name — cdm_name","text":"cdm cdm_reference object","code":""},{"path":"/reference/cdm_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the CDM name — cdm_name","text":"name CDM character string","code":""},{"path":[]},{"path":"/reference/cdm_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the CDM name — cdm_name","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir()) cdm <- cdmFromCon(con, cdmSchema = \"main\", writeSchema = \"main\") cdmName(cdm) #> [1] \"eunomia\"  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/cdm_select_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a subset of tables in a cdm reference object — cdm_select_tbl","title":"Select a subset of tables in a cdm reference object — cdm_select_tbl","text":"function uses syntax similar dplyr::select can used subset cdm reference object specific tables","code":""},{"path":"/reference/cdm_select_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a subset of tables in a cdm reference object — cdm_select_tbl","text":"","code":"cdm_select_tbl(cdm, ...)"},{"path":"/reference/cdm_select_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a subset of tables in a cdm reference object — cdm_select_tbl","text":"cdm cdm reference object created cdm_from_con ... One table names tables cdm object. tidyselect supported, see dplyr::select() details semantics.","code":""},{"path":"/reference/cdm_select_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a subset of tables in a cdm reference object — cdm_select_tbl","text":"cdm reference object containing selected tables","code":""},{"path":"/reference/cdm_select_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select a subset of tables in a cdm reference object — cdm_select_tbl","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir())  cdm <- cdm_from_con(con, \"main\")  cdm_select_tbl(cdm, person) cdm_select_tbl(cdm, person, observation_period) cdm_select_tbl(cdm, tbl_group(\"vocab\")) cdm_select_tbl(cdm, \"person\")  DBI::dbDisconnect(con) } # }"},{"path":"/reference/cohortAttrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Get attrition table from a cohort_table object — cohortAttrition","title":"Get attrition table from a cohort_table object — cohortAttrition","text":"Get attrition table cohort_table object","code":""},{"path":"/reference/cohortAttrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get attrition table from a cohort_table object — cohortAttrition","text":"","code":"cohortAttrition(x)  cohort_attrition(x)"},{"path":"/reference/cohortAttrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get attrition table from a cohort_table object — cohortAttrition","text":"x cohort_table object","code":""},{"path":"/reference/cohortErafy.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse cohort records within a certain number of days — cohortErafy","title":"Collapse cohort records within a certain number of days — cohortErafy","text":"Collapse cohort records within certain number days","code":""},{"path":"/reference/cohortErafy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse cohort records within a certain number of days — cohortErafy","text":"","code":"cohortErafy(x, gap)  cohort_erafy(x, gap)"},{"path":"/reference/cohortErafy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse cohort records within a certain number of days — cohortErafy","text":"x generated cohort set gap two cohort records 'gap' days apart less periods collapsed single record","code":""},{"path":"/reference/cohortErafy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse cohort records within a certain number of days — cohortErafy","text":"lazy query generated cohort set","code":""},{"path":"/reference/cohortSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cohort settings from a cohort_table object — cohortSet","title":"Get cohort settings from a cohort_table object — cohortSet","text":"Get cohort settings cohort_table object","code":""},{"path":"/reference/cohortSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cohort settings from a cohort_table object — cohortSet","text":"","code":"cohortSet(x)  cohort_set(x)"},{"path":"/reference/cohortSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cohort settings from a cohort_table object — cohortSet","text":"x cohort_table object","code":""},{"path":"/reference/cohortUnion.html","id":null,"dir":"Reference","previous_headings":"","what":"Union all cohorts in a cohort set with cohorts in a second cohort set — cohortUnion","title":"Union all cohorts in a cohort set with cohorts in a second cohort set — cohortUnion","text":"Union cohorts cohort set cohorts second cohort set","code":""},{"path":"/reference/cohortUnion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union all cohorts in a cohort set with cohorts in a second cohort set — cohortUnion","text":"","code":"cohortUnion(x, y)  cohort_union(x, y)"},{"path":"/reference/cohortUnion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union all cohorts in a cohort set with cohorts in a second cohort set — cohortUnion","text":"x tbl reference cohort table one generated cohorts y tbl reference cohort table one generated cohort","code":""},{"path":"/reference/cohortUnion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union all cohorts in a cohort set with cohorts in a second cohort set — cohortUnion","text":"lazy query executed resolve new cohort table one cohort_definitions_ids x resulting union cohorts x single cohort y cohort table","code":""},{"path":[]},{"path":"/reference/cohort_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cohort counts from a generated_cohort_set object. — cohort_count","text":"","code":"cohort_count(cohort)"},{"path":"/reference/cohort_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cohort counts from a generated_cohort_set object. — cohort_count","text":"cohort generated_cohort_set object.","code":""},{"path":"/reference/cohort_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cohort counts from a generated_cohort_set object. — cohort_count","text":"table counts.","code":""},{"path":"/reference/cohort_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cohort counts from a generated_cohort_set object. — cohort_count","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) library(dplyr)  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir()) cdm <- cdmFromCon(con = con, cdmSchema = \"main\", writeSchema = \"main\") cdm <- generateConceptCohortSet(   cdm = cdm, conceptSet = list(pharyngitis = 4112343), name = \"new_cohort\" ) cohortCount(cdm$new_cohort) } # }"},{"path":"/reference/cohort_erafy.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse cohort records within a certain number of days — cohort_erafy","title":"Collapse cohort records within a certain number of days — cohort_erafy","text":"Collapse cohort records within certain number days","code":""},{"path":"/reference/cohort_erafy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse cohort records within a certain number of days — cohort_erafy","text":"","code":"cohort_erafy(x, gap)  cohortErafy(x, gap)"},{"path":"/reference/cohort_erafy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse cohort records within a certain number of days — cohort_erafy","text":"x generated cohort set gap two cohort records 'gap' days apart less periods collapsed single record","code":""},{"path":"/reference/cohort_erafy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse cohort records within a certain number of days — cohort_erafy","text":"lazy query generated cohort set","code":""},{"path":"/reference/cohort_union.html","id":null,"dir":"Reference","previous_headings":"","what":"Union all cohorts in a cohort set with cohorts in a second cohort set — cohort_union","title":"Union all cohorts in a cohort set with cohorts in a second cohort set — cohort_union","text":"Union cohorts cohort set cohorts second cohort set","code":""},{"path":"/reference/cohort_union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union all cohorts in a cohort set with cohorts in a second cohort set — cohort_union","text":"","code":"cohort_union(x, y)  cohortUnion(x, y)"},{"path":"/reference/cohort_union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union all cohorts in a cohort set with cohorts in a second cohort set — cohort_union","text":"x tbl reference cohort table one generated cohorts y tbl reference cohort table one generated cohort","code":""},{"path":"/reference/cohort_union.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union all cohorts in a cohort set with cohorts in a second cohort set — cohort_union","text":"lazy query executed resolve new cohort table one cohort_definitions_ids x resulting union cohorts x single cohort y cohort table","code":""},{"path":"/reference/collect.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Bring a remote CDM reference into R — collect.cdm_reference","title":"Bring a remote CDM reference into R — collect.cdm_reference","text":"function calls collect list lazy queries returns result list dataframes.","code":""},{"path":"/reference/collect.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bring a remote CDM reference into R — collect.cdm_reference","text":"","code":"# S3 method for cdm_reference collect(x, ...)"},{"path":"/reference/collect.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bring a remote CDM reference into R — collect.cdm_reference","text":"x cdm_reference object. ... used. Included compatibility.","code":""},{"path":"/reference/collect.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bring a remote CDM reference into R — collect.cdm_reference","text":"cdm_reference object list R dataframes.","code":""},{"path":"/reference/collect.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bring a remote CDM reference into R — collect.cdm_reference","text":"","code":"if (FALSE) { con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) vocab <- cdm_from_con(con, \"main\") %>%   cdm_select_tbl(\"concept\", \"concept_ancestor\")  local_vocab <- collect(vocab) DBI::dbDisconnect(con, shutdown = TRUE) }"},{"path":"/reference/computeQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute dplyr query and save result in remote database — computeQuery","title":"Execute dplyr query and save result in remote database — computeQuery","text":"function wrapper around dplyr::compute tested several database systems. needed handle edge cases dplyr::compute produce correct SQL.","code":""},{"path":"/reference/computeQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute dplyr query and save result in remote database — computeQuery","text":"","code":"computeQuery(   x,   name = uniqueTableName(),   temporary = TRUE,   schema = NULL,   overwrite = TRUE,   ... )"},{"path":"/reference/computeQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute dplyr query and save result in remote database — computeQuery","text":"x dplyr query name name table create. temporary table temporary: TRUE (default) FALSE schema schema table created. Ignored temporary = TRUE. overwrite table overwritten already exists: TRUE (default) FALSE Ignored temporary = TRUE. ... arguments passed dplyr::compute","code":""},{"path":"/reference/computeQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute dplyr query and save result in remote database — computeQuery","text":"dplyr::tbl() reference newly created table.","code":""},{"path":"/reference/computeQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute dplyr query and save result in remote database — computeQuery","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector)  con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) cdm <- cdmFromCon(con, \"main\")  # create a temporary table in the remote database from a dplyr query drugCount <- cdm$concept %>%   dplyr::count(domain_id == \"Drug\") %>%   computeQuery()  # create a permanent table in the remote database from a dplyr query drugCount <- cdm$concept %>%   dplyr::count(domain_id == \"Drug\") %>%   computeQuery(\"tmp_table\", temporary = FALSE, schema = \"main\")  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/copyCdmTo.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a cdm object from one database to another — copyCdmTo","title":"Copy a cdm object from one database to another — copyCdmTo","text":"may helpful able easily copy small test cdm local database remote testing. copyCdmTo takes cdm object connection. copies cdm remote database connection. CDM tables can prefixed new database allowing multiple cdms single shared database schema.","code":""},{"path":"/reference/copyCdmTo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a cdm object from one database to another — copyCdmTo","text":"","code":"copyCdmTo(con, cdm, schema, overwrite = FALSE)"},{"path":"/reference/copyCdmTo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a cdm object from one database to another — copyCdmTo","text":"con DBI datbase connection created DBI::dbConnect cdm cdm reference object created CDMConnector::cdmFromCon CDMConnector::cdm_from_con schema schema name remote database user write permission overwrite cohort table overwritten already exists? TRUE FALSE (default)","code":""},{"path":"/reference/copyCdmTo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a cdm object from one database to another — copyCdmTo","text":"cdm reference object pointing newly created cdm remote database","code":""},{"path":"/reference/copy_cdm_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy a cdm object from one database to another — copy_cdm_to","title":"Copy a cdm object from one database to another — copy_cdm_to","text":"may helpful able easily copy small test cdm local database remote testing. copy_cdm_to takes cdm object connection. copies cdm remote database connection. CDM tables can prefixed new database allowing multiple cdms single shared database schema.","code":""},{"path":"/reference/copy_cdm_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy a cdm object from one database to another — copy_cdm_to","text":"","code":"copy_cdm_to(con, cdm, schema, overwrite = FALSE)  copyCdmTo(con, cdm, schema, overwrite = FALSE)"},{"path":"/reference/copy_cdm_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy a cdm object from one database to another — copy_cdm_to","text":"con DBI datbase connection created DBI::dbConnect cdm cdm reference object created CDMConnector::cdmFromCon CDMConnector::cdm_from_con schema schema name remote database user write permission overwrite cohort table overwritten already exists? TRUE FALSE (default)","code":""},{"path":"/reference/copy_cdm_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy a cdm object from one database to another — copy_cdm_to","text":"cdm reference object pointing newly created cdm remote database","code":""},{"path":[]},{"path":"/reference/dateadd.html","id":null,"dir":"Reference","previous_headings":"","what":"Add days or years to a date in a dplyr query — dateadd","title":"Add days or years to a date in a dplyr query — dateadd","text":"function must \"unquoted\" using \"bang bang\" operator (!!). See example.","code":""},{"path":"/reference/dateadd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add days or years to a date in a dplyr query — dateadd","text":"","code":"dateadd(date, number, interval = \"day\")"},{"path":"/reference/dateadd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add days or years to a date in a dplyr query — dateadd","text":"date name date column database table character string number number units add. Can positive negative whole number. interval units add. Must either \"day\" (default) \"year\"","code":""},{"path":"/reference/dateadd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add days or years to a date in a dplyr query — dateadd","text":"Platform specific SQL can used dplyr query.","code":""},{"path":"/reference/dateadd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add days or years to a date in a dplyr query — dateadd","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb()) date_tbl <- dplyr::copy_to(con, data.frame(date1 = as.Date(\"1999-01-01\")),                            name = \"tmpdate\", overwrite = TRUE, temporary = TRUE)  df <- date_tbl %>%   dplyr::mutate(date2 = !!dateadd(\"date1\", 1, interval = \"year\")) %>%   dplyr::collect()  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/datediff.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the difference between two days — datediff","title":"Compute the difference between two days — datediff","text":"function must \"unquoted\" using \"bang bang\" operator (!!). See example.","code":""},{"path":"/reference/datediff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the difference between two days — datediff","text":"","code":"datediff(start, end, interval = \"day\")"},{"path":"/reference/datediff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the difference between two days — datediff","text":"start name start date column database string. end name end date column database string. interval units use difference calculation. Must either \"day\" (default) \"year\".","code":""},{"path":"/reference/datediff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the difference between two days — datediff","text":"Platform specific SQL can used dplyr query.","code":""},{"path":"/reference/datediff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the difference between two days — datediff","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb()) date_tbl <- dplyr::copy_to(con, data.frame(date1 = as.Date(\"1999-01-01\")),                            name = \"tmpdate\", overwrite = TRUE, temporary = TRUE)  df <- date_tbl %>%   dplyr::mutate(date2 = !!dateadd(\"date1\", 1, interval = \"year\")) %>%   dplyr::mutate(dif_years = !!datediff(\"date1\", \"date2\", interval = \"year\")) %>%   dplyr::collect()  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/datepart.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the day, month or year of a date in a dplyr pipeline — datepart","title":"Extract the day, month or year of a date in a dplyr pipeline — datepart","text":"Extract day, month year date dplyr pipeline","code":""},{"path":"/reference/datepart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the day, month or year of a date in a dplyr pipeline — datepart","text":"","code":"datepart(date, interval = \"year\", dbms = NULL)"},{"path":"/reference/datepart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the day, month or year of a date in a dplyr pipeline — datepart","text":"date Character string represents date column. interval Interval extract date. Valid options \"year\", \"month\", \"day\". dbms Database system, NULL auto detected.","code":""},{"path":"/reference/datepart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the day, month or year of a date in a dplyr pipeline — datepart","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), \":memory:\") date_tbl <- dplyr::copy_to(con,                            data.frame(birth_date = as.Date(\"1993-04-19\")),                            name = \"tmp\",                            temporary = TRUE) df <- date_tbl %>%   dplyr::mutate(year = !!datepart(\"birth_date\", \"year\")) %>%   dplyr::mutate(month = !!datepart(\"birth_date\", \"month\")) %>%   dplyr::mutate(day = !!datepart(\"birth_date\", \"day\")) %>%   dplyr::collect() DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/dbSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a source for a cdm in a database. — dbSource","title":"Create a source for a cdm in a database. — dbSource","text":"Create source cdm database.","code":""},{"path":"/reference/dbSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a source for a cdm in a database. — dbSource","text":"","code":"dbSource(con, writeSchema)"},{"path":"/reference/dbSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a source for a cdm in a database. — dbSource","text":"con Connection database. writeSchema Schema cohort tables . must read write access .","code":""},{"path":"/reference/dbms.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the database management system (dbms) from a cdm_reference or DBI connection — dbms","title":"Get the database management system (dbms) from a cdm_reference or DBI connection — dbms","text":"Get database management system (dbms) cdm_reference DBI connection","code":""},{"path":"/reference/dbms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the database management system (dbms) from a cdm_reference or DBI connection — dbms","text":"","code":"dbms(con)"},{"path":"/reference/dbms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the database management system (dbms) from a cdm_reference or DBI connection — dbms","text":"con DBI connection cdm_reference","code":""},{"path":"/reference/dbms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the database management system (dbms) from a cdm_reference or DBI connection — dbms","text":"character string representing dbms can used SqlRender","code":""},{"path":"/reference/dbms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the database management system (dbms) from a cdm_reference or DBI connection — dbms","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) cdm <- cdmFromCon(con) dbms(cdm) dbms(con) } # }"},{"path":"/reference/downloadEunomiaData.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Eunomia data files — downloadEunomiaData","title":"Download Eunomia data files — downloadEunomiaData","text":"Download Eunomia data files https://github.com/darwin-eu/EunomiaDatasets","code":""},{"path":"/reference/downloadEunomiaData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Eunomia data files — downloadEunomiaData","text":"","code":"downloadEunomiaData(   datasetName = \"GiBleed\",   cdmVersion = \"5.3\",   pathToData = Sys.getenv(\"EUNOMIA_DATA_FOLDER\"),   overwrite = FALSE )"},{"path":"/reference/downloadEunomiaData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Eunomia data files — downloadEunomiaData","text":"datasetName data set name found https://github.com/darwin-eu/EunomiaDatasets. data set name corresponds folder data set ZIP files cdmVersion OMOP CDM version. version appear suffix data file, example: synpuf_5.3.zip. Must '5.3' (default) '5.4'. pathToData path Eunomia data stored file system., default value environment variable \"EUNOMIA_DATA_FOLDER\" used. overwrite Control whether existing archive file overwritten already exist.","code":""},{"path":"/reference/downloadEunomiaData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Eunomia data files — downloadEunomiaData","text":"Invisibly returns destination download successful.","code":""},{"path":"/reference/downloadEunomiaData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Eunomia data files — downloadEunomiaData","text":"","code":"if (FALSE) { # \\dontrun{ downloadEunomiaData(\"GiBleed\") } # }"},{"path":"/reference/dropTable.db_cdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop table from a database backed cdm object — dropTable.db_cdm","title":"Drop table from a database backed cdm object — dropTable.db_cdm","text":"Tables dropped write schema cdm.","code":""},{"path":"/reference/dropTable.db_cdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop table from a database backed cdm object — dropTable.db_cdm","text":"","code":"# S3 method for class 'db_cdm' dropTable(cdm, name)"},{"path":"/reference/dropTable.db_cdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop table from a database backed cdm object — dropTable.db_cdm","text":"cdm cdm_reference object name character vector table names dropped","code":""},{"path":"/reference/eunomiaDir.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a copy of an example OMOP CDM dataset — eunomiaDir","title":"Create a copy of an example OMOP CDM dataset — eunomiaDir","text":"Eunomia OHDSI project provides several example OMOP CDM datasets testing development. function creates copy Eunomia database duckdb returns path new database file. dataset yet exist user's computer attempt download source data path defined EUNOMIA_DATA_FOLDER environment variable.","code":""},{"path":"/reference/eunomiaDir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a copy of an example OMOP CDM dataset — eunomiaDir","text":"","code":"eunomiaDir(   datasetName = \"GiBleed\",   cdmVersion = \"5.3\",   databaseFile = tempfile(fileext = \".duckdb\") )"},{"path":"/reference/eunomiaDir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a copy of an example OMOP CDM dataset — eunomiaDir","text":"datasetName One \"GiBleed\" (default), \"synthea-allergies-10k\", \"synthea-anemia-10k\", \"synthea-breast_cancer-10k\", \"synthea-contraceptives-10k\", \"synthea-covid19-10k\", \"synthea-covid19-200k\", \"synthea-dermatitis-10k\", \"synthea-heart-10k\", \"synthea-hiv-10k\", \"synthea-lung_cancer-10k\", \"synthea-medications-10k\", \"synthea-metabolic_syndrome-10k\", \"synthea-opioid_addiction-10k\", \"synthea-rheumatoid_arthritis-10k\", \"synthea-snf-10k\", \"synthea-surgery-10k\", \"synthea-total_joint_replacement-10k\", \"synthea-veteran_prostate_cancer-10k\", \"synthea-veterans-10k\", \"synthea-weight_loss-10k\", \"empty_cdm\", \"synpuf-1k\" cdmVersion OMOP CDM version. Must \"5.3\" \"5.4\". databaseFile full path new copy example CDM dataset.","code":""},{"path":"/reference/eunomiaDir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a copy of an example OMOP CDM dataset — eunomiaDir","text":"file path new Eunomia dataset copy","code":""},{"path":"/reference/eunomiaDir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a copy of an example OMOP CDM dataset — eunomiaDir","text":"Eunomia datasets available CDMConnector Synthea project. Synthea open-source synthetic patient generator models medical history synthetic patients. Synthea datasets generated using Synthea tool converted OMOP CDM format using OHDSI ETL-Synthea project https://ohdsi.github.io/ETL-Synthea/. Currently synthea datasets available OMOP CDM v5.3 format. See https://synthetichealth.github.io/synthea/ details Synthea project. addition Synthea, Eunomia project provides CMS Synthetic Public Use Files (SynPUFs) 5.3 5.4 OMOP CDM formats. data synthetic US Medicare claims data mapped OMOP CDM format. OMOP CDM set optional metadata tables, called Achilles tables, include pre-computed analytics entire dataset record person counts. Eunomia Synpuf datasets include Achilles tables. Eunomia also provides empty cdms can used starting point creating new example CDM. useful creating test data studies analytic packages. empty CDM includes vocabulary tables OMOP CDM tables clinical tables empty need populated data. additional information creating small test CDM datasets see https://ohdsi.github.io/omock/ https://darwin-eu.github.io/TestGenerator/. contribute synthetic observational health data Eunomia project please open issue https://github.com/OHDSI/Eunomia/issues/ Setup: use eunomiaDir function please set EUNOMIA_DATA_FOLDER .Renviron file folder computer datasets downloaded . file can opened calling usethis::edit_r_environ().","code":""},{"path":"/reference/eunomiaDir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a copy of an example OMOP CDM dataset — eunomiaDir","text":"","code":"if (FALSE) { # \\dontrun{   # The defaults GiBleed dataset is a small dataset that is useful for testing  library(CDMConnector)  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir())  cdm <- cdmFromCon(con, \"main\", \"main\")  cdmDisconnect(cdm)   # Synpuf datasets include the Achilles tables  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir(\"synpuf-1k\", \"5.3\"))  cdm <- cdmFromCon(con, \"main\", \"main\", achillesSchema = \"main\")  cdmDisconnect(cdm)   # Currently the only 5.4 dataset is synpuf-1k  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir(\"synpuf-1k\", \"5.4\"))  cdm <- cdmFromCon(con, \"main\", \"main\", achillesSchema = \"main\")  cdmDisconnect(cdm)  } # }"},{"path":"/reference/eunomiaIsAvailable.html","id":null,"dir":"Reference","previous_headings":"","what":"Has the Eunomia dataset been cached? — eunomiaIsAvailable","title":"Has the Eunomia dataset been cached? — eunomiaIsAvailable","text":"Eunomia dataset cached?","code":""},{"path":"/reference/eunomiaIsAvailable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Has the Eunomia dataset been cached? — eunomiaIsAvailable","text":"","code":"eunomiaIsAvailable(datasetName = \"GiBleed\", cdmVersion = \"5.3\")"},{"path":"/reference/eunomiaIsAvailable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Has the Eunomia dataset been cached? — eunomiaIsAvailable","text":"datasetName Name Eunomia dataset check. Defaults \"GiBleed\". cdmVersion Version Eunomia dataset check. Must \"5.3\" \"5.4\".","code":""},{"path":"/reference/eunomiaIsAvailable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Has the Eunomia dataset been cached? — eunomiaIsAvailable","text":"TRUE eunomia example dataset available FASLE otherwise","code":""},{"path":"/reference/eunomia_is_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Has the Eunomia dataset been cached? — eunomiaIsAvailable","title":"Has the Eunomia dataset been cached? — eunomiaIsAvailable","text":"Eunomia dataset cached?","code":""},{"path":"/reference/eunomia_is_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Has the Eunomia dataset been cached? — eunomiaIsAvailable","text":"","code":"eunomiaIsAvailable(dataset_name = \"GiBleed\", cdm_version = \"5.3\")  eunomiaIsAvailable(datasetName = \"GiBleed\", cdmVersion = \"5.3\")"},{"path":"/reference/eunomia_is_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Has the Eunomia dataset been cached? — eunomiaIsAvailable","text":"dataset_name, datasetName Name Eunomia dataset check. Defaults \"GiBleed\". cdm_version, cdmVersion Version Eunomia dataset check. Must \"5.3\" \"5.4\".","code":""},{"path":"/reference/eunomia_is_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Has the Eunomia dataset been cached? — eunomiaIsAvailable","text":"TRUE eunomia example dataset available FASLE otherwise","code":""},{"path":"/reference/exampleDatasets.html","id":null,"dir":"Reference","previous_headings":"","what":"List the available example CDM datasets — exampleDatasets","title":"List the available example CDM datasets — exampleDatasets","text":"List available example CDM datasets","code":""},{"path":"/reference/exampleDatasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the available example CDM datasets — exampleDatasets","text":"","code":"exampleDatasets()"},{"path":"/reference/exampleDatasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the available example CDM datasets — exampleDatasets","text":"character vector example CDM dataset identifiers","code":""},{"path":"/reference/exampleDatasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the available example CDM datasets — exampleDatasets","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) exampleDatasets()[1] #> [1] \"GiBleed\"  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir(\"GiBleed\")) cdm <- cdmFromCon(con) } # }"},{"path":"/reference/generateCohortSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a cohort set on a cdm object — generateCohortSet","title":"Generate a cohort set on a cdm object — generateCohortSet","text":"\"chort_table\" object consists four components remote table reference OHDSI cohort table least columns: cohort_definition_id, subject_id, cohort_start_date, cohort_end_date. Additional columns optional analytic packages define additional columns specific certain analytic cohorts. settings attribute points remote table containing cohort settings including names cohorts. attrition attribute points remote table attrition information recorded generation. attribute optional. Since calculating attrition takes additional compute can skipped resulting NULL attrition attribute. cohortCounts attribute points remote table containing cohort counts three attributes tidy tables. implementation object experimental user feedback welcome. One key design principle cohort_table objects created can persist across analysis execution modified creation. possible modify cohort_table object invalidate attributes may longer accurate.","code":""},{"path":"/reference/generateCohortSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a cohort set on a cdm object — generateCohortSet","text":"","code":"generateCohortSet(   cdm,   cohortSet,   name,   computeAttrition = TRUE,   overwrite = TRUE )"},{"path":"/reference/generateCohortSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a cohort set on a cdm object — generateCohortSet","text":"cdm cdm reference created CDMConnector. write_schema must specified. cohortSet cohortSet dataframe created readCohortSet() name Name cohort table created. also used prefix cohort attribute tables. must lowercase character string starts letter contains letters, numbers, underscores. computeAttrition attrition computed? TRUE (default) FALSE overwrite cohort table overwritten already exists? TRUE (default) FALSE","code":""},{"path":"/reference/generateCohortSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a cohort set on a cdm object — generateCohortSet","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir()) cdm <- cdmFromCon(con,                   cdmSchema = \"main\",                   writeSchema = \"main\")  cohortSet <- readCohortSet(system.file(\"cohorts2\", package = \"CDMConnector\")) cdm <- generateCohortSet(cdm, cohortSet, name = \"cohort\")  print(cdm$cohort)  attrition(cdm$cohort) settings(cdm$cohort) cohortCount(cdm$cohort) } # }"},{"path":"/reference/generateConceptCohortSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new generated cohort set from a list of concept sets — generateConceptCohortSet","title":"Create a new generated cohort set from a list of concept sets — generateConceptCohortSet","text":"Generate new cohort set one concept sets. concept set result one cohort represent time concept observed subject/person. Concept sets can passed function : named list numeric vectors, one vector per concept set named list Capr concept sets Clinical observation records looked respective domain tables using vocabulary CDM. required domain table exist cdm object warning given. Concepts vocabulary data silently ignored. end dates missing exist, case procedure observation domains, start date used end date.","code":""},{"path":"/reference/generateConceptCohortSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new generated cohort set from a list of concept sets — generateConceptCohortSet","text":"","code":"generateConceptCohortSet(   cdm,   conceptSet = NULL,   name,   limit = \"first\",   requiredObservation = c(0, 0),   end = \"observation_period_end_date\",   subsetCohort = NULL,   subsetCohortId = NULL,   overwrite = TRUE )"},{"path":"/reference/generateConceptCohortSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new generated cohort set from a list of concept sets — generateConceptCohortSet","text":"cdm cdm reference object created CDMConnector::cdmFromCon CDMConnector::cdm_from_con conceptSet named list numeric vectors Concept Set Expression created omopgenerics::newConceptSetExpression name name new generated cohort table character string limit Include \"first\" (default) \"\" occurrences events cohort \"first\" include first occurrence event concept set cohort. \"\" include occurrences events defined concept set cohort. requiredObservation numeric vector length 2 specifies number days required observation time prior index post index event included cohort. end cohort_end_date defined? \"observation_period_end_date\" (default): earliest observation_period_end_date event start date numeric scalar: fixed number days event start date \"event_end_date\": event end date. event end date populated event start date used subsetCohort cohort table containing individuals generate cohorts . individuals cohort table appear created generated cohort set. subsetCohortId set cohort IDs cohort table include. none provided, cohorts cohort table included. overwrite cohort table overwritten already exists? TRUE (default) FALSE.","code":""},{"path":"/reference/generateConceptCohortSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new generated cohort set from a list of concept sets — generateConceptCohortSet","text":"cdm reference object new generated cohort set table added","code":""},{"path":"/reference/inSchema.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for working with compound schemas — inSchema","title":"Helper for working with compound schemas — inSchema","text":"similar dbplyr::in_schema tested across multiple database platforms. exists work around limitations dbplyr::in_schema.","code":""},{"path":"/reference/inSchema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for working with compound schemas — inSchema","text":"","code":"inSchema(schema, table, dbms = NULL)"},{"path":"/reference/inSchema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for working with compound schemas — inSchema","text":"schema schema name character string table table name character string dbms name database management system returned dbms(connection)","code":""},{"path":"/reference/inSchema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for working with compound schemas — inSchema","text":"DBI::Id represents qualified table schema","code":""},{"path":"/reference/intersectCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersect all cohorts in a single cohort table — intersectCohorts","title":"Intersect all cohorts in a single cohort table — intersectCohorts","text":"Intersect cohorts single cohort table","code":""},{"path":"/reference/intersectCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersect all cohorts in a single cohort table — intersectCohorts","text":"","code":"intersectCohorts(x, cohortDefinitionId = 1L)  intersect_cohorts(x, cohort_definition_id = 1L)"},{"path":"/reference/intersectCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersect all cohorts in a single cohort table — intersectCohorts","text":"x tbl reference cohort table cohort_definition_id, cohortDefinitionId number use new cohort_definition_id","code":""},{"path":"/reference/intersectCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersect all cohorts in a single cohort table — intersectCohorts","text":"lazy query executed resolve new cohort table one cohort_definition_id resulting intersection cohorts original cohort table","code":""},{"path":"/reference/intersect_cohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersect all cohorts in a single cohort table — intersect_cohorts","title":"Intersect all cohorts in a single cohort table — intersect_cohorts","text":"Intersect cohorts single cohort table","code":""},{"path":"/reference/intersect_cohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersect all cohorts in a single cohort table — intersect_cohorts","text":"","code":"intersect_cohorts(x, cohort_definition_id = 1L)  intersectCohorts(x, cohort_definition_id = 1L)"},{"path":"/reference/intersect_cohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersect all cohorts in a single cohort table — intersect_cohorts","text":"x tbl reference cohort table cohort_definition_id number use new cohort_definition_id","code":""},{"path":"/reference/intersect_cohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersect all cohorts in a single cohort table — intersect_cohorts","text":"lazy query executed resolve new cohort table one cohort_definition_id resulting intersection cohorts original cohort table","code":""},{"path":"/reference/listTables.html","id":null,"dir":"Reference","previous_headings":"","what":"List tables in a schema — listTables","title":"List tables in a schema — listTables","text":"DBI::dbListTables can used get tables database always specific schema. listTables list tables schema.","code":""},{"path":"/reference/listTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List tables in a schema — listTables","text":"","code":"listTables(con, schema = NULL)"},{"path":"/reference/listTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List tables in a schema — listTables","text":"con DBI connection database schema name schema database. NULL, returns DBI::dbListTables(con).","code":""},{"path":"/reference/listTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List tables in a schema — listTables","text":"character vector table names","code":""},{"path":"/reference/listTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List tables in a schema — listTables","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) listTables(con, schema = \"main\") } # }"},{"path":"/reference/list_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"List tables in a schema — list_tables","title":"List tables in a schema — list_tables","text":"DBI::dbListTables can used get tables database always specific schema. listTables list tables schema.","code":""},{"path":"/reference/list_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List tables in a schema — list_tables","text":"","code":"list_tables(con, schema = NULL)  listTables(con, schema = NULL)"},{"path":"/reference/list_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List tables in a schema — list_tables","text":"con DBI connection database schema name schema database. NULL, returns DBI::dbListTables(con).","code":""},{"path":"/reference/list_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List tables in a schema — list_tables","text":"character vector table names","code":""},{"path":"/reference/list_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List tables in a schema — list_tables","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) listTables(con, schema = \"main\") } # }"},{"path":[]},{"path":"/reference/new_generated_cohort_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for cohort_table objects — new_generated_cohort_set","text":"","code":"new_generated_cohort_set(   cohort_ref,   cohort_set_ref = NULL,   cohort_attrition_ref = NULL,   cohort_count_ref = NULL,   overwrite )  newGeneratedCohortSet(   cohortRef,   cohortSetRef = NULL,   cohortAttritionRef = NULL,   cohortCountRef = NULL,   overwrite )"},{"path":"/reference/new_generated_cohort_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for cohort_table objects — new_generated_cohort_set","text":"cohort_ref, cohortRef tbl_sql object points remote cohort table following first four columns: cohort_definition_id, subject_id, cohort_start_date, cohort_end_date. Additional columns optional. cohort_set_ref, cohortSetRef tbl_sql object points remote table following first two columns: cohort_definition_id, cohort_name. Additional columns optional. cohort_definition_id primary key table uniquely identify rows. cohort_attrition_ref, cohortAttritionRef tbl_sql object points attrition table remote database first column cohort_definition_id. cohort_count_ref, cohortCountRef tbl_sql object points cohort_count table remote database columns cohort_definition_id, cohort_entries, cohort_subjects. overwrite tables overwritten already exist? TRUE FALSE (default)","code":""},{"path":"/reference/new_generated_cohort_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for cohort_table objects — new_generated_cohort_set","text":"cohort_table object tbl_sql reference cohort table write_schema OMOP CDM","code":""},{"path":"/reference/new_generated_cohort_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for cohort_table objects — new_generated_cohort_set","text":"Please use omopgenerics::newCohortTable() instead. constructor function used analytic package developers create cohort_table objects. cohort_table set person-time OMOP CDM database. cohort_table can represented table three columns: subject_id, cohort_start_date, cohort_end_date. Subject_id person_id OMOP CDM. cohort_table collection one cohort_table can represented table four columns: cohort_definition_id, subject_id, cohort_start_date, cohort_end_date. constructor function defines cohort_table object R. object extension tbl_sql object defined dplyr. lazy database query points cohort table database least columns cohort_definition_id, subject_id, cohort_start_date, cohort_end_date. table optionally columns well. addition cohort_table object three optional attributes. : cohort_set, cohort_attrition, cohort_count. attributes also lazy SQL query (tbl_sql) points table database described .","code":""},{"path":"/reference/new_generated_cohort_set.html","id":"cohort-set","dir":"Reference","previous_headings":"","what":"cohort_set","title":"Constructor for cohort_table objects — new_generated_cohort_set","text":"cohort_set table one row per cohort_definition_id. first two columns cohort_set table : cohort_definition_id, cohort_name. Additional columns can added. cohort_set table meant store metadata cohort definition. Since table required created supplied.","code":""},{"path":"/reference/new_generated_cohort_set.html","id":"cohort-attrition","dir":"Reference","previous_headings":"","what":"cohort_attrition","title":"Constructor for cohort_table objects — new_generated_cohort_set","text":"cohort_attrition optional table stores attrition information recorded cohort generation process many persons dropped step inclusion rule application. first column table cohort_definition_id columns currently constraints.","code":""},{"path":"/reference/new_generated_cohort_set.html","id":"cohort-count","dir":"Reference","previous_headings":"","what":"cohort_count","title":"Constructor for cohort_table objects — new_generated_cohort_set","text":"cohort_count option attribute table records number records number unique persons cohort cohort_table. derived metadata can re-derived long cohort_set, complete list cohorts set, available. Column names cohort_count : cohort_definition_id, number_records, number_subjects. table required cohort_table objects created supplied.","code":""},{"path":"/reference/new_generated_cohort_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for cohort_table objects — new_generated_cohort_set","text":"","code":"if (FALSE) { # \\dontrun{  # This function is for developers who are creating cohort_table  # objects in their packages. The function should accept a cdm_reference  # object as the first argument and return a cdm_reference object with the  # cohort table added. The second argument should be `name` which will be  # the prefix for the database tables, the name of the cohort table in the  # database and the name of the cohort table in the cdm object.  # Other optional arguments can be added after the first two.   generateCustomCohort <- function(cdm, name, ...) {     # accept a cdm_reference object as input    checkmate::assertClass(cdm, \"cdm_reference\")    con <- attr(cdm, \"dbcon\")     # Create the tables in the database however you like    # All the tables should be prefixed with `name`    # The cohort table should be called `name` in the database     # Create the dplyr table references    cohort_ref <- dplyr::tbl(con, name)    cohort_set <- dplyr::tbl(con, paste0(name, \"_set\"))    cohort_attrition_ref <- dplyr::tbl(con, paste0(name, \"_attrition\"))    cohort_count_ref <- dplyr::tbl(con, paste0(name, \"_count\"))     # add to the cdm    cdm[[name]] <- cohort_ref     # create the generated cohort set object using the constructor    cdm[[name]] <- newGeneratedCohortSet(       cdm[[name]],       cohortSetRef = cohort_set_ref,       cohortAttritionRef = cohort_attrition_ref,       cohortCountRef = cohort_count_ref)     return(cdm)  } } # }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Pipe operator","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/print.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a CDM reference object — print.cdm_reference","title":"Print a CDM reference object — print.cdm_reference","text":"Print CDM reference object","code":""},{"path":"/reference/print.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a CDM reference object — print.cdm_reference","text":"","code":"# S3 method for cdm_reference print(x, ...)"},{"path":"/reference/print.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a CDM reference object — print.cdm_reference","text":"x cdm_reference object ... Included compatibility generic. used.","code":""},{"path":"/reference/print.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a CDM reference object — print.cdm_reference","text":"Invisibly returns input","code":""},{"path":"/reference/readCohortSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a set of cohort definitions into R — readCohortSet","title":"Read a set of cohort definitions into R — readCohortSet","text":"\"cohort set\" collection cohort definitions. R stored dataframe cohort_definition_id, cohort_name, cohort columns. disk stored folder CohortsToCreate.csv file one json files. CohortsToCreate.csv file missing json files folder used, cohort_definition_id automatically assigned alphabetical order, cohort_name match file names.","code":""},{"path":"/reference/readCohortSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a set of cohort definitions into R — readCohortSet","text":"","code":"readCohortSet(path)"},{"path":"/reference/readCohortSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a set of cohort definitions into R — readCohortSet","text":"path path folder containing Circe cohort definition json files optionally csv file named CohortsToCreate.csv columns cohortId, cohortName, jsonPath.","code":""},{"path":"/reference/read_cohort_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a set of cohort definitions into R — read_cohort_set","title":"Read a set of cohort definitions into R — read_cohort_set","text":"\"cohort set\" collection cohort definitions. R stored dataframe cohort_definition_id, cohort_name, cohort columns. disk stored folder CohortsToCreate.csv file one json files. CohortsToCreate.csv file missing json files folder used, cohort_definition_id automatically assigned alphabetical order, cohort_name match file names.","code":""},{"path":"/reference/read_cohort_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a set of cohort definitions into R — read_cohort_set","text":"","code":"read_cohort_set(path)  readCohortSet(path)"},{"path":"/reference/read_cohort_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a set of cohort definitions into R — read_cohort_set","text":"path path folder containing Circe cohort definition json files optionally csv file named CohortsToCreate.csv columns cohortId, cohortName, jsonPath.","code":""},{"path":"/reference/record_cohort_attrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Add attrition reason to a cohort_table object — record_cohort_attrition","title":"Add attrition reason to a cohort_table object — record_cohort_attrition","text":"Update cohort attrition table new counts reason attrition.","code":""},{"path":"/reference/record_cohort_attrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add attrition reason to a cohort_table object — record_cohort_attrition","text":"","code":"record_cohort_attrition(cohort, reason, cohortId = NULL)"},{"path":"/reference/record_cohort_attrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add attrition reason to a cohort_table object — record_cohort_attrition","text":"cohort generated cohort set reason reason attrition character string cohortId Cohort definition id cohort want update attrition","code":""},{"path":"/reference/record_cohort_attrition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add attrition reason to a cohort_table object — record_cohort_attrition","text":"cohort object attributes created updated.","code":""},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr compute omopgenerics attrition, bind, cdmDisconnect, cdmFromTables, cdmName, cdmSelect, cdmVersion, cohortCodelist, cohortCount, dropSourceTable, dropTable, insertCdmTo, insertTable, listSourceTables, newCohortTable, readSourceTable, recordCohortAttrition, settings, uniqueTableName","code":""},{"path":"/reference/requireEunomia.html","id":null,"dir":"Reference","previous_headings":"","what":"Require eunomia to be available. The function makes sure that you can later create a eunomia database with eunomiaDir(). — requireEunomia","title":"Require eunomia to be available. The function makes sure that you can later create a eunomia database with eunomiaDir(). — requireEunomia","text":"Require eunomia available. function makes sure can later create eunomia database eunomiaDir().","code":""},{"path":"/reference/requireEunomia.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require eunomia to be available. The function makes sure that you can later create a eunomia database with eunomiaDir(). — requireEunomia","text":"","code":"requireEunomia(datasetName = \"GiBleed\", cdmVersion = \"5.3\")"},{"path":"/reference/requireEunomia.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require eunomia to be available. The function makes sure that you can later create a eunomia database with eunomiaDir(). — requireEunomia","text":"datasetName Name Eunomia dataset check. Defaults \"GiBleed\". cdmVersion Version Eunomia dataset check. Must \"5.3\" \"5.4\".","code":""},{"path":"/reference/requireEunomia.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require eunomia to be available. The function makes sure that you can later create a eunomia database with eunomiaDir(). — requireEunomia","text":"Path eunomia database.","code":""},{"path":"/reference/snapshot.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract CDM metadata — snapshot","title":"Extract CDM metadata — snapshot","text":"Extract name, version, selected record counts cdm.","code":""},{"path":"/reference/snapshot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract CDM metadata — snapshot","text":"","code":"snapshot(cdm)"},{"path":"/reference/snapshot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract CDM metadata — snapshot","text":"cdm cdm object","code":""},{"path":"/reference/snapshot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract CDM metadata — snapshot","text":"named list attributes cdm including selected fields cdm_source table record counts person observation_period tables","code":""},{"path":"/reference/snapshot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract CDM metadata — snapshot","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir()) cdm <- cdmFromCon(con, \"main\") snapshot(cdm)  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/stow.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect a list of lazy queries and save the results as files — stow","title":"Collect a list of lazy queries and save the results as files — stow","text":"Collect list lazy queries save results files","code":""},{"path":"/reference/stow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect a list of lazy queries and save the results as files — stow","text":"","code":"stow(cdm, path, format = \"parquet\")"},{"path":"/reference/stow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect a list of lazy queries and save the results as files — stow","text":"cdm cdm object path folder save cdm object format file format use: \"parquet\" (default), \"csv\", \"feather\" \"duckdb\".","code":""},{"path":"/reference/stow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect a list of lazy queries and save the results as files — stow","text":"Invisibly returns cdm input","code":""},{"path":"/reference/stow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect a list of lazy queries and save the results as files — stow","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) vocab <- cdmFromCon(con, \"main\") %>%   cdmSelectTbl(\"concept\", \"concept_ancestor\") stow(vocab, here::here(\"vocab_tables\")) DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/sub-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cdm reference object — [.cdm_reference","title":"Subset a cdm reference object — [.cdm_reference","text":"Subset cdm reference object","code":""},{"path":"/reference/sub-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cdm reference object — [.cdm_reference","text":"","code":"# S3 method for cdm_reference [(x, i)"},{"path":"/reference/sub-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cdm reference object — [.cdm_reference","text":"x cdm reference name index table extract cdm object","code":""},{"path":"/reference/sub-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cdm reference object — [.cdm_reference","text":"single cdm table reference","code":""},{"path":"/reference/sub-sub-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cdm reference object — [[.cdm_reference","title":"Subset a cdm reference object — [[.cdm_reference","text":"Subset cdm reference object","code":""},{"path":"/reference/sub-sub-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cdm reference object — [[.cdm_reference","text":"","code":"# S3 method for cdm_reference [[(x, i)"},{"path":"/reference/sub-sub-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cdm reference object — [[.cdm_reference","text":"x cdm reference name index table extract cdm object","code":""},{"path":"/reference/sub-sub-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cdm reference object — [[.cdm_reference","text":"single cdm table reference","code":""},{"path":"/reference/summariseQuantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile calculation using dbplyr — summariseQuantile","title":"Quantile calculation using dbplyr — summariseQuantile","text":"function provides DBMS independent syntax quantiles estimation. Can used combination mutate() calculating aggregate metrics (min, max, mean). summarise_quantile(), summarize_quantile(), summariseQuantile() summarizeQuantile() synonyms.","code":""},{"path":"/reference/summariseQuantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile calculation using dbplyr — summariseQuantile","text":"","code":"summariseQuantile(.data, x = NULL, probs, nameSuffix = \"value\")"},{"path":"/reference/summariseQuantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile calculation using dbplyr — summariseQuantile","text":".data lazy data frame backed database query. x column name whose sample quantiles wanted. probs numeric vector probabilities values [0,1]. nameSuffix character; appended numerical quantile value column name part.","code":""},{"path":"/reference/summariseQuantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile calculation using dbplyr — summariseQuantile","text":"object type '.data'","code":""},{"path":"/reference/summariseQuantile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantile calculation using dbplyr — summariseQuantile","text":"Implemented quantiles estimation algorithm returns values analogous quantile{stats} argument type = 1. See discussion Hyndman Fan (1996). Results differ PERCENTILE_CONT natively implemented various DBMS, returned values equal quantile{stats} default argument type = 7","code":""},{"path":"/reference/summariseQuantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile calculation using dbplyr — summariseQuantile","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb()) mtcars_tbl <- dplyr::copy_to(con, mtcars, name = \"tmp\", overwrite = TRUE, temporary = TRUE)  df <- mtcars_tbl %>%  dplyr::group_by(cyl) %>%  dplyr::mutate(mean = mean(mpg, na.rm = TRUE)) %>%  summariseQuantile(mpg, probs = c(0, 0.2, 0.4, 0.6, 0.8, 1),                    nameSuffix = \"quant\") %>%  dplyr::collect()  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/summariseQuantile2.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile calculation using dbplyr — summariseQuantile2","title":"Quantile calculation using dbplyr — summariseQuantile2","text":"function provides DBMS independent syntax quantile estimation. database systems quantile function. SQL generated summarizeQuantile2 work supported database systems. function can added dplyr pipeline adds additional query input. computation triggered summarizeQuantile2 input tbl reference database table.","code":""},{"path":"/reference/summariseQuantile2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile calculation using dbplyr — summariseQuantile2","text":"","code":"summariseQuantile2(.data, x, probs, nameSuffix = \"{x}\")"},{"path":"/reference/summariseQuantile2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile calculation using dbplyr — summariseQuantile2","text":".data lazy data frame backed database query created dplyr::tbl(). x string vector column names whose sample quantiles wanted. probs numeric vector probabilities values [0,1]. nameSuffix single character character string, evaluated glue::glue() appended numerical quantile value column name part.","code":""},{"path":"/reference/summariseQuantile2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile calculation using dbplyr — summariseQuantile2","text":"lazy query quantile calculation added. result (computation) one row per combination grouping variables one column every variable/quantile combination. (see examples)","code":""},{"path":"/reference/summariseQuantile2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantile calculation using dbplyr — summariseQuantile2","text":"Implemented quantiles estimation algorithm returns values analogous quantile{stats} argument type = 1. See discussion Hyndman Fan (1996). Results differ PERCENTILE_CONT natively implemented various DBMS, returned values equal quantile{stats} default argument type = 7","code":""},{"path":"/reference/summariseQuantile2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile calculation using dbplyr — summariseQuantile2","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb()) mtcars_tbl <- dplyr::copy_to(con, mtcars, name = \"tmp\", overwrite = TRUE, temporary = TRUE)  # quantiles for a single column mtcars_tbl %>%   dplyr::group_by(cyl) %>%   dplyr::mutate(mean = mean(mpg, na.rm = TRUE)) %>%   summariseQuantile2(\"mpg\", probs = c(0, 0.2, 0.4, 0.6, 0.8, 1),  nameSuffix = \"quant\") %>%   dplyr::collect()  #> cyl  p0_quant p20_quant p40_quant p60_quant p80_quant p100_quant #>   6      17.8      18.1      19.2      21        21         21.4 #>   8      10.4      13.3      15        15.5      17.3       19.2 #>   4      21.4      22.8      24.4      27.3      30.4       33.9  # multiple columns mtcars_tbl %>%   dplyr::group_by(cyl) %>%   dplyr::mutate(mean = mean(mpg, na.rm = TRUE)) %>%   summariseQuantile2(c(\"mpg\", \"hp\", \"wt\"), probs = c(0.2, 0.8),  nameSuffix = \"{x}_quant\") %>%   dplyr::collect()  #>  cyl p20_mpg_quant p80_mpg_quant p20_hp_quant p80_hp_quant p20_wt_quant p80_wt_quant #>    4          22.8          30.4           65           97         1.84         2.78 #>    6          18.1          21            110          123         2.77         3.44 #>    8          13.3          17.3          175          245         3.44         5.25  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/summarise_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile calculation using dbplyr — summarise_quantile","title":"Quantile calculation using dbplyr — summarise_quantile","text":"function provides DBMS independent syntax quantiles estimation. Can used combination mutate() calculating aggregate metrics (min, max, mean). summarise_quantile(), summarize_quantile(), summariseQuantile() summarizeQuantile() synonyms.","code":""},{"path":"/reference/summarise_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile calculation using dbplyr — summarise_quantile","text":"","code":"summarise_quantile(.data, x = NULL, probs, name_suffix = \"value\")  summarize_quantile(.data, x = NULL, probs, name_suffix = \"value\")  summariseQuantile(.data, x = NULL, probs, nameSuffix = \"value\")  summarizeQuantile(.data, x = NULL, probs, nameSuffix = \"value\")"},{"path":"/reference/summarise_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile calculation using dbplyr — summarise_quantile","text":".data lazy data frame backed database query. x column name whose sample quantiles wanted. probs numeric vector probabilities values [0,1]. name_suffix, nameSuffix character; appended numerical quantile value column name part.","code":""},{"path":"/reference/summarise_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile calculation using dbplyr — summarise_quantile","text":"object type '.data'","code":""},{"path":"/reference/summarise_quantile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantile calculation using dbplyr — summarise_quantile","text":"Implemented quantiles estimation algorithm returns values analogous quantile{stats} argument type = 1. See discussion Hyndman Fan (1996). Results differ PERCENTILE_CONT natively implemented various DBMS, returned values equal quantile{stats} default argument type = 7","code":""},{"path":"/reference/summarise_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile calculation using dbplyr — summarise_quantile","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb()) mtcars_tbl <- dplyr::copy_to(con, mtcars, name = \"tmp\", overwrite = TRUE, temporary = TRUE)  df <- mtcars_tbl %>%  dplyr::group_by(cyl) %>%  dplyr::mutate(mean = mean(mpg, na.rm = TRUE)) %>%  summarise_quantile(mpg, probs = c(0, 0.2, 0.4, 0.6, 0.8, 1),                     name_suffix = \"quant\") %>%  dplyr::collect()  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/tblGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"CDM table selection helper — tblGroup","title":"CDM table selection helper — tblGroup","text":"OMOP CDM tables grouped together tblGroup function allows users easily create CDM reference including one table groups.","code":""},{"path":"/reference/tblGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDM table selection helper — tblGroup","text":"","code":"tblGroup(group)"},{"path":"/reference/tblGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDM table selection helper — tblGroup","text":"group character vector CDM table groups: \"vocab\", \"clinical\", \"\", \"default\", \"derived\".","code":""},{"path":"/reference/tblGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDM table selection helper — tblGroup","text":"character vector CDM tables names groups","code":""},{"path":"/reference/tblGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CDM table selection helper — tblGroup","text":"\"default\" table group meant capture commonly used set CDM tables. Currently \"default\" group : person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship, location, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, concept, vocabulary, concept_relationship, concept_ancestor, concept_synonym, drug_strength","code":""},{"path":"/reference/tblGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDM table selection helper — tblGroup","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = \"cdm\",                       host = \"localhost\",                       user = \"postgres\",                       password = Sys.getenv(\"PASSWORD\"))  cdm <- cdmFromCon(con, cdmName = \"test\", cdmSchema = \"public\") %>%   cdmSelectTbl(tblGroup(\"vocab\")) } # }"},{"path":"/reference/tbl_group.html","id":null,"dir":"Reference","previous_headings":"","what":"CDM table selection helper — tbl_group","title":"CDM table selection helper — tbl_group","text":"OMOP CDM tables grouped together tbl_group function allows users easily create CDM reference including one table groups.","code":""},{"path":"/reference/tbl_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDM table selection helper — tbl_group","text":"","code":"tbl_group(group)  tblGroup(group)"},{"path":"/reference/tbl_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDM table selection helper — tbl_group","text":"group character vector CDM table groups: \"vocab\", \"clinical\", \"\", \"default\", \"derived\".","code":""},{"path":"/reference/tbl_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDM table selection helper — tbl_group","text":"character vector CDM tables names groups","code":""},{"path":"/reference/tbl_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CDM table selection helper — tbl_group","text":"\"default\" table group meant capture commonly used set CDM tables. Currently \"default\" group : person, observation_period, visit_occurrence, visit_detail, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, death, note, note_nlp, specimen, fact_relationship, location, care_site, provider, payer_plan_period, cost, drug_era, dose_era, condition_era, concept, vocabulary, concept_relationship, concept_ancestor, concept_synonym, drug_strength","code":""},{"path":"/reference/tbl_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDM table selection helper — tbl_group","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = \"cdm\",                       host = \"localhost\",                       user = \"postgres\",                       password = Sys.getenv(\"PASSWORD\"))  cdm <- cdm_from_con(con, cdm_name = \"test\", cdm_schema = \"public\") %>%   cdm_select_tbl(tbl_group(\"vocab\")) } # }"},{"path":"/reference/unionCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Union all cohorts in a single cohort table — unionCohorts","title":"Union all cohorts in a single cohort table — unionCohorts","text":"Union cohorts single cohort table","code":""},{"path":"/reference/unionCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union all cohorts in a single cohort table — unionCohorts","text":"","code":"unionCohorts(x, cohortDefinitionId = 1L)  union_cohorts(x, cohort_definition_id = 1L)"},{"path":"/reference/unionCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union all cohorts in a single cohort table — unionCohorts","text":"x tbl reference cohort table cohort_definition_id, cohortDefinitionId number use new cohort_definition_id","code":""},{"path":"/reference/unionCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union all cohorts in a single cohort table — unionCohorts","text":"lazy query executed resolve new cohort table one cohort_definition_id resulting union cohorts original cohort table","code":""},{"path":"/reference/union_cohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Union all cohorts in a single cohort table — union_cohorts","title":"Union all cohorts in a single cohort table — union_cohorts","text":"Union cohorts single cohort table","code":""},{"path":"/reference/union_cohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union all cohorts in a single cohort table — union_cohorts","text":"","code":"union_cohorts(x, cohort_definition_id = 1L)  unionCohorts(x, cohort_definition_id = 1L)"},{"path":"/reference/union_cohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union all cohorts in a single cohort table — union_cohorts","text":"x tbl reference cohort table cohort_definition_id number use new cohort_definition_id","code":""},{"path":"/reference/union_cohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union all cohorts in a single cohort table — union_cohorts","text":"lazy query executed resolve new cohort table one cohort_definition_id resulting union cohorts original cohort table","code":""},{"path":[]},{"path":"/reference/unique_table_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a unique table name for temp tables — unique_table_name","text":"","code":"unique_table_name()"},{"path":"/reference/unique_table_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a unique table name for temp tables — unique_table_name","text":"string can used dbplyr temp table name","code":""},{"path":"/reference/validateCdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation report for a CDM — validateCdm","title":"Validation report for a CDM — validateCdm","text":"Print short validation report cdm object. validation includes checking column names correct tables empty. short report printed console. function meant interactive use.","code":""},{"path":"/reference/validateCdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation report for a CDM — validateCdm","text":"","code":"validateCdm(cdm)  validate_cdm(cdm)"},{"path":"/reference/validateCdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation report for a CDM — validateCdm","text":"cdm cdm reference object.","code":""},{"path":"/reference/validateCdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation report for a CDM — validateCdm","text":"Invisibly returns cdm input","code":""},{"path":[]},{"path":"/reference/validateCdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validation report for a CDM — validateCdm","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir()) cdm <- cdmFromCon(con, cdmSchema = \"main\") validateCdm(cdm) DBI::dbDisconnect(con) } # }"},{"path":"/reference/validate_cdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation report for a CDM — validate_cdm","title":"Validation report for a CDM — validate_cdm","text":"Print short validation report cdm object. validation includes checking column names correct tables empty. short report printed console. function meant interactive use.","code":""},{"path":"/reference/validate_cdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation report for a CDM — validate_cdm","text":"","code":"validate_cdm(cdm)  validateCdm(cdm)"},{"path":"/reference/validate_cdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation report for a CDM — validate_cdm","text":"cdm cdm reference object.","code":""},{"path":"/reference/validate_cdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation report for a CDM — validate_cdm","text":"Invisibly returns cdm input","code":""},{"path":"/reference/validate_cdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validation report for a CDM — validate_cdm","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir()) cdm <- cdm_from_con(con, cdm_schema = \"main\") validate_cdm(cdm) DBI::dbDisconnect(con) } # }"},{"path":"/reference/version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the CDM version — version","title":"Get the CDM version — version","text":"Extract CDM version attribute cdm_reference object","code":""},{"path":"/reference/version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the CDM version — version","text":"","code":"version(cdm)"},{"path":"/reference/version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the CDM version — version","text":"cdm cdm object","code":""},{"path":"/reference/version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the CDM version — version","text":"\"5.3\" \"5.4\"","code":""},{"path":"/reference/version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the CDM version — version","text":"","code":"if (FALSE) { # \\dontrun{ library(CDMConnector) con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir()) cdm <- cdmFromCon(con, cdmSchema = \"main\", writeSchema = \"main\") version(cdm)  DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":"/reference/visr.omop_attrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an attrition diagram from a generated cohort set — visr.omop_attrition","title":"Create an attrition diagram from a generated cohort set — visr.omop_attrition","text":"Create attrition diagram generated cohort set","code":""},{"path":"/reference/visr.omop_attrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an attrition diagram from a generated cohort set — visr.omop_attrition","text":"","code":"visr.omop_attrition(x, ...)"},{"path":"/reference/visr.omop_attrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an attrition diagram from a generated cohort set — visr.omop_attrition","text":"x GeneratedCohortSet object ... used","code":""},{"path":"/reference/visr.omop_attrition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an attrition diagram from a generated cohort set — visr.omop_attrition","text":"return value. function create one attrition plot generated cohort.","code":""},{"path":"/reference/visr.omop_attrition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an attrition diagram from a generated cohort set — visr.omop_attrition","text":"","code":"if (FALSE) { library(CDMConnector) library(dplyr)  con <- DBI::dbConnect(duckdb::duckdb(), eunomiaDir()) cdm <- cdm_from_con(con, \"main\", \"main\") cohort_set <- read_cohort_set(system.file(\"cohorts2\", package = \"CDMConnector\")) cdm <- generate_cohort_set(cdm, cohort_set, name = \"cohort\", overwrite = T)  cohort_attrition(cdm$cohort) %>%  dplyr::filter(cohort_definition_id == 3) %>%  visR::visr()  DBI::dbDisconnect(con, shutdown = TRUE) }"},{"path":"/news/index.html","id":"cdmconnector-210","dir":"Changelog","previous_headings":"","what":"CDMConnector 2.1.0","title":"CDMConnector 2.1.0","text":"Add support Redshift Spark DatabaseConnector driver (pending version 7) @IoannaNika Update readme instructions use camel case functions @ginberg New summariseQuantile2 function supports multiple variables @ablack3 Fixed returned table references @mvankessel-EMC Validate writePrefix @xihang-chen","code":""},{"path":"/news/index.html","id":"cdmconnector-200","dir":"Changelog","previous_headings":"","what":"CDMConnector 2.0.0","title":"CDMConnector 2.0.0","text":"CRAN release: 2025-02-21 Remove snake case functions favor camel case style Remove cohort table manipulation functions Add row cohort attrition table accounts record collapsing cohort eras step Atlas/Circe cohort generation Increase test coverage Fix bugs cdmFlatten Add support snowflake DatabaseConnector driver Add attrition record cohort era collapse generating Atlas cohorts","code":""},{"path":"/news/index.html","id":"cdmconnector-170","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.7.0","title":"CDMConnector 1.7.0","text":"CRAN release: 2024-12-19 Add support Big Query using bigrquery DBI package (pending PRs omopgenerics bigrquery) @IoannaNika Add support DatabaseConnector postgresql JDBC driver @ablack3 default automatically detect CDM version @catalamarti Deprecate snake case functions @IoannaNika Deprecate cohort manipulation functions @ablack3 Deprecate validation functions @ablack3","code":""},{"path":"/news/index.html","id":"cdmconnector-161","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.6.1","title":"CDMConnector 1.6.1","text":"CRAN release: 2024-11-29 use BIGINT subject_id column cohort tables","code":""},{"path":"/news/index.html","id":"cdmconnector-160","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.6.0","title":"CDMConnector 1.6.0","text":"CRAN release: 2024-11-13 fix bug copyCdmTo attribute tables copied #231 @catalamarti check overwrite argument works compute using temp tables #222 @ablack3 added synpuf1k Achilles tables example datasets #230 @ablack3 add requireEunomia function #481 @catalamarti","code":""},{"path":"/news/index.html","id":"cdmconnector-150","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.5.0","title":"CDMConnector 1.5.0","text":"CRAN release: 2024-07-16 Get tests passing Databricks/Spark using odbc driver Emulate temporary tables Databricks/Spark compute called temporary = TRUE soft deprecate asDate favor .Date soft deprecate assertWriteSchema since cdm object now required always write schema remove support Capr cohort objects generate_cohort_set pass CRAN checks","code":""},{"path":"/news/index.html","id":"cdmconnector-140","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.4.0","title":"CDMConnector 1.4.0","text":"CRAN release: 2024-05-03 fix issue cran server new omopgenerics methods","code":""},{"path":"/news/index.html","id":"cdmconnector-131","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.3.1","title":"CDMConnector 1.3.1","text":"CRAN release: 2024-04-02 Bug fix collapse cohort dbplyr 2.5.0 fixes","code":""},{"path":"/news/index.html","id":"cdmconnector-130","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.3.0","title":"CDMConnector 1.3.0","text":"CRAN release: 2024-02-05 Incorporate omopgenerics","code":""},{"path":"/news/index.html","id":"cdmconnector-121","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.2.1","title":"CDMConnector 1.2.1","text":"CRAN release: 2024-01-18 Fix failing CRAN tests","code":""},{"path":"/news/index.html","id":"cdmconnector-120","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.2.0","title":"CDMConnector 1.2.0","text":"CRAN release: 2023-10-31 Compatibility dbplyr v2.4.0","code":""},{"path":"/news/index.html","id":"cdmconnector-114","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.1.4","title":"CDMConnector 1.1.4","text":"CRAN release: 2023-10-20 Fix recursive edge cases cdm reference issue.","code":""},{"path":"/news/index.html","id":"cdmconnector-113","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.1.3","title":"CDMConnector 1.1.3","text":"CRAN release: 2023-10-14 Fix recursive cdm reference issue. Thanks @catalamarti!","code":""},{"path":"/news/index.html","id":"cdmconnector-112","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.1.2","title":"CDMConnector 1.1.2","text":"CRAN release: 2023-08-22 fix failing test CRAN","code":""},{"path":"/news/index.html","id":"cdmconnector-111","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.1.1","title":"CDMConnector 1.1.1","text":"CRAN release: 2023-08-22 add bigquery support August 22, 2023","code":""},{"path":"/news/index.html","id":"cdmconnector-110","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.1.0","title":"CDMConnector 1.1.0","text":"CRAN release: 2023-08-17 add copy_cdm_to, copyCdmTo add generate_concept_cohort_set, generateConceptCohortSet add example CDM datasets add record_cohort_attrition, recordCohortAttrition improve database test coverage update vignettes Released Aug 17, 2023","code":""},{"path":"/news/index.html","id":"cdmconnector-100","dir":"Changelog","previous_headings":"","what":"CDMConnector 1.0.0","title":"CDMConnector 1.0.0","text":"CRAN release: 2023-06-12 remove write_prefix cdm_from_con favor using write_schema argument prefixing remove cdm_tables argument cdm_from_con favor cdm_select_tbl selection function add attributes cdm object communicate downstream temp table preferences Released June 7, 2023","code":""},{"path":"/news/index.html","id":"cdmconnector-060","dir":"Changelog","previous_headings":"","what":"CDMConnector 0.6.0","title":"CDMConnector 0.6.0","text":"CRAN release: 2023-05-05 generate Capr cohorts generateCohortSet add datepart function extracting year, month, day parts dates dplyr fix datediff logic years now returns number complete years two date add “write_prefix” attribute cdm objects support namespace within write_schema Released May 5, 2023","code":""},{"path":"/news/index.html","id":"cdmconnector-051","dir":"Changelog","previous_headings":"","what":"CDMConnector 0.5.1","title":"CDMConnector 0.5.1","text":"CRAN release: 2023-03-22 Add camelCase snake_case versions functions (@Tsemharb) Add cdm object attributes cdm_snapshot output use number_records number_subjects cohort counts table Minor bug fixes Released March 20, 2023","code":""},{"path":"/news/index.html","id":"cdmconnector-050","dir":"Changelog","previous_headings":"","what":"CDMConnector 0.5.0","title":"CDMConnector 0.5.0","text":"CRAN release: 2023-03-09 Define generatedCohortSet class Add summarize_quantile cross database quantile queries Add GeneratedCohortSet object, constructor, attribute accessor functions Add vignette cohort generation Add cdmSubset, cdmSubsetCohort, cdmSample subsetting cdm Add cdmFlatten transforming cdm single flat table observations Improve test coverage Make Java dependency optional cdm_schema now required cdm_from_con except duckdb connections Remove visit_detail default cdm tables Deprecate computePermanent Improve package website Substantial contributions @edward-burn, @catalamarti, @Tsemharb now package co-authors. Released Mar 8, 2023","code":""},{"path":"/news/index.html","id":"cdmconnector-041","dir":"Changelog","previous_headings":"","what":"CDMConnector 0.4.1","title":"CDMConnector 0.4.1","text":"CRAN release: 2023-01-24 Add computeQuery function creating temp persistent tables dplyr queries Download Eunomia darwin-eu repository zipped csv files Add passing tests Oracle Spark Add asDate wrapper provides correct .Date dbplyr translations Incorporate code review suggestions @mvankessel-EMC Released Jan 21, 2023","code":""},{"path":"/news/index.html","id":"cdmconnector-030","dir":"Changelog","previous_headings":"","what":"CDMConnector 0.3.0","title":"CDMConnector 0.3.0","text":"CRAN release: 2022-11-29 Add computePermanent appendPermanent functions Add readCohortSet Add generateCohortSet Extract Eunomia dataset downloaded separately Released Nov 29, 2022","code":""},{"path":"/news/index.html","id":"cdmconnector-020","dir":"Changelog","previous_headings":"","what":"CDMConnector 0.2.0","title":"CDMConnector 0.2.0","text":"Add support OMOP v5.3 v5.4 Add datediff dateadd functions can used dplyr::mutate() Add assert_tables function checking cdm object required tables Add camelCase versions several functions Released Nov 15, 2022","code":""},{"path":"/news/index.html","id":"cdmconnector-010","dir":"Changelog","previous_headings":"","what":"CDMConnector 0.1.0","title":"CDMConnector 0.1.0","text":"CRAN release: 2022-09-29 Initial release Sept 11, 2022 Added NEWS.md file track changes package.","code":""}]
